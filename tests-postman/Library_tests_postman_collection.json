{
	"info": {
		"_postman_id": "a1441775-e3b1-4906-a696-14515bb5972a",
		"name": "Library tests",
		"description": "Integrations tests for Library application",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Unauthenticated requests",
			"item": [
				{
					"name": "Document",
					"item": [
						{
							"name": "Get all documents default page, no search criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "770b0e82-dddc-40b4-8b28-682aad1f9c18",
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test('Status test', function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"pm.test('Total pages test', function() {",
											"    pm.expect(responseJson.totalPages).to.equal(2);",
											"})",
											"pm.test('Total elements test', function() {",
											"    pm.expect(responseJson.totalElements).to.equal(9);",
											"})",
											"pm.test('First page test', function() {",
											"    pm.expect(responseJson.first).to.equal(true);",
											"})",
											"pm.test('Page size', function() {",
											"    pm.expect(responseJson.size).to.equal(6);",
											"})",
											"pm.test('Page number of elements', function() {",
											"    pm.expect(responseJson.numberOfElements).to.equal(6);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/documents",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"documents"
									]
								},
								"description": "Try to get all documents where visitor is not connected"
							},
							"response": []
						},
						{
							"name": "Get all documents, page 2, no search criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eceaa65c-b1c7-4fa2-869f-3234edb5a38f",
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test('Status test', function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"pm.test('Last page test', function() {",
											"    pm.expect(responseJson.last).to.equal(true);",
											"})",
											"pm.test('First page test', function() {",
											"    pm.expect(responseJson.first).to.equal(false);",
											"})",
											"pm.test('Page number test', function() {",
											"    pm.expect(responseJson.number).to.equal(1);",
											"})",
											"pm.test('Page number of elements', function() {",
											"    pm.expect(responseJson.numberOfElements).to.equal(3);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/documents?page=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"documents"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get document id 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9c46f4b7-1390-4381-84a2-fc0ad88091d3",
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test('Status test', function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"pm.test('Document id test', function() {",
											"    pm.expect(responseJson.id).to.equal(4);",
											"})",
											"pm.test('Document title test', function() {",
											"    pm.expect(responseJson.title).to.equal('Le petit prince');",
											"})",
											"pm.test('Document photo exist test', function() {",
											"    pm.expect(responseJson.photo.fileToBase64String).not.eq(undefined);",
											"})",
											"pm.test('Document waitingList id test', function() {",
											"    pm.expect(responseJson.waitingList.id).to.equal(1);",
											"})",
											"pm.test('Document waitingList size test', function() {",
											"    pm.expect(responseJson.waitingList.size).to.equal(16);",
											"})",
											"pm.test('Document can\\'t be reserved test', function() {",
											"    pm.expect(responseJson.canBeReserved).to.equal(false);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/documents/4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"documents",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get document id 75, status 500",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7989c16b-c1f4-4c34-a314-70b59c3e65cf",
										"exec": [
											"pm.test('Internal server error test', function() {",
											"    pm.expect(pm.response.code).to.equal(500);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/documents/75",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"documents",
										"75"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create document, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b9ea4fc7-f9fa-4608-90b8-168cd283a91f",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 123,\n    \"title\": \"title\",\n    \"isbn\" : \"klsqdoiqod54887\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/documents",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update document, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5b8b96c-1691-4e29-8ccd-204d80c50eae",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 123,\n    \"title\": \"title\",\n    \"isbn\" : \"klsqdoiqod54887\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/documents/4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"documents",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete document, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41176967-122b-479b-b746-396ecd1c6cc3",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/documents/4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"documents",
										"4"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Author",
					"item": [
						{
							"name": "Get all authors, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "732f4b85-7c9b-4e96-a859-e86018783ef6",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/authors",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"authors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get author id 1, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8756c4f2-f0e1-4299-9c1b-7ab2dedcbe56",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/authors/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"authors",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create author, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5610073b-0226-4fcc-bb48-a454a05ad5e3",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 71,\n    \"lastName\": \"lastName\",\n    \"firstName\": \"firstName\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/authors",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"authors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update author, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54442e88-e731-450d-a3a2-2c1f6ae25d55",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 71,\n    \"lastName\": \"lastName\",\n    \"firstName\": \"firstName\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/authors/71",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"authors",
										"71"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete author, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6495270f-5325-403a-b47f-3a9dc8dbbc32",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/authors/71",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"authors",
										"71"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Signin valid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "314c3798-fb4c-41ff-8ba2-655bcf670460",
										"exec": [
											"const responseJson = pm.response.json();",
											"const resultExpected = {",
											"    \"id\" : 2,",
											"    \"username\": \"user1\",",
											"    \"email\": \"user1@email.com\",",
											"    \"roles\": [\"ROLE_USER\"]",
											"};",
											"",
											"pm.test('Status test', function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"pm.test('User informations test', function() {",
											"    pm.expect(responseJson).to.deep.include(resultExpected);",
											"})",
											"pm.test('Token test', function() {",
											"    pm.expect(responseJson.token).not.eq(undefined);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"user1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Signin invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8974931-4543-451e-ac0f-12ae76eeddce",
										"exec": [
											"pm.test('Unauthorized test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Signin invalid credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7eb09d9f-3e31-4ebc-bb17-883d7131a58d",
										"exec": [
											"pm.test('Unauthorized test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"user2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Signup valid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "733bb7c8-effc-4502-b5a4-c248ca9ff236",
										"exec": [
											"pm.test('Status success test', function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"username\",\n    \"password\": \"password\",\n    \"email\": \"email@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Signup username exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52c575ff-397d-4032-8f7c-5c185c02bd15",
										"exec": [
											"pm.test('Status error test', function() {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"})",
											"pm.test('Message error test', function() {",
											"    pm.expect(pm.response.json().message).to.equal('Erreur : le pseudo est déjà utilisé !');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"password\",\n    \"email\": \"asdqsdq@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Signup email exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e327835-9708-42bf-86ab-1c63b8c05e56",
										"exec": [
											"pm.test('Status error test', function() {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"})",
											"pm.test('Message error test', function() {",
											"    pm.expect(pm.response.json().message).to.equal('Erreur : l\\'email est déjà utilisé !');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"dfsdfsdf\",\n    \"password\": \"password\",\n    \"email\": \"user2@mail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Exemplar",
					"item": [
						{
							"name": "Get all available exemplars by document id = 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a24e55c-44b5-4f80-9219-7e33e7c7ffd0",
										"exec": [
											"pm.test('Status success test', function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"const resultsExpected = [",
											"    {",
											"        \"number\": 2,",
											"        \"libraryName\": \"Bibliothèque Stephen King\"",
											"    },",
											"    {",
											"        \"number\": 4,",
											"        \"libraryName\": \"Grande bibliothèque de Lyon\"",
											"    },",
											"    {",
											"        \"number\": 2,",
											"        \"libraryName\": \"Bibliothèque Voltaire\"",
											"    }",
											"]",
											"",
											"pm.test('Results test', function() {",
											"    pm.expect(pm.response.json()).to.deep.equal(resultsExpected);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/exemplars?documentId=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"exemplars"
									],
									"query": [
										{
											"key": "documentId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all available exemplars by document id = 16",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa6f7136-a513-4570-a8c2-7e9b6e260c28",
										"exec": [
											"pm.test('Status success test', function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"pm.test('Results test', function() {",
											"    pm.expect(pm.response.json()).to.deep.equal([]);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/exemplars?documentId=0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"exemplars"
									],
									"query": [
										{
											"key": "documentId",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exemplar id 47",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b300a00c-1689-45b4-9ed0-036ed812ca44",
										"exec": [
											"const resultExpected = {",
											"    \"id\": 38,",
											"    \"reference\": \"BOOK_9782253151593_1597229931728\",",
											"    \"document\": {",
											"        \"id\": 16,",
											"        \"title\": \"Brume\",",
											"        \"isbn\": \"978-2-253-15159-3\",",
											"        \"description\": \"Imaginez une brume qui s'abat soudainement sur une petite ville, une brume si épaisse que les clients d'un supermarché hésitent à en ressortir. Il n'en faut pas davantage au maître de l'épouvante pour nous plonger dans le cauchemar avec un réalisme hallucinant. Chacune des nouvelles de ce volume possède le même pouvoir ensorcelant. Vous serez terrifié par un petit singe en peluche qui joue des cymbales. Vous redouterez de voir surgir le fantôme d'un... camion. Vous saurez de quoi est capable un naufragé solitaire, lorsque la faim le tenaille et que la drogue décuple son courage. L'art de faire surgir l'effrayant ou le surnaturel au cœur d'un monde rassurant et prosaïque... Les superbes décors du Maine, où vit Stephen King, se révèlent une fois encore peuplés de sortilèges et de malédictions. \",",
											"        \"publicationDate\": \"2006-06-07\",",
											"        \"publisher\": {",
											"            \"id\": 10,",
											"            \"name\": \"Livre de poche\"",
											"        },",
											"        \"author\": {",
											"            \"id\": 6,",
											"            \"lastName\": \"King\",",
											"            \"firstName\": \"Stephen\"",
											"        },",
											"        \"type\": \"Livre\",",
											"        \"category\": \"Science-Fiction\",",
											"        \"photo\": {",
											"            \"id\": 2,",
											"            \"name\": \"978-2-253-15159-3.jpg\",",
											"            \"extension\": \"jpg\",",
											"            \"fileToBase64String\": null",
											"        },",
											"        \"waitingList\": {",
											"            \"id\": 3,",
											"            \"size\": 2,",
											"            \"full\": false,",
											"            \"documentTitle\": \"Brume\",",
											"            \"documentId\": 16,",
											"            \"endDateNextLoanReturn\": null,",
											"            \"numberUsersInWaitingList\": 0",
											"        },",
											"        \"canBeReserved\": true",
											"    },",
											"    \"library\": {",
											"        \"id\": 25,",
											"        \"name\": \"Grande bibliothèque de Lyon\"",
											"    }",
											"}",
											"",
											"pm.test('Status success test', function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"pm.test('Result test', function() {",
											"    pm.expect(pm.response.json()).to.deep.equal(resultExpected);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/exemplars/38",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"exemplars",
										"38"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exemplar id 256 not exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4f5f2b3-2965-4a26-82b9-8a4420776da5",
										"exec": [
											"pm.test('Internal server error test', function() {",
											"    pm.expect(pm.response.code).to.equal(500);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/exemplars/256",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"exemplars",
										"256"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create exemplar, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa79572a-35b9-4688-84c9-e0c9c25647ef",
										"exec": [
											"pm.test('Unauthorizes status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 122,\n    \"reference\": \"BOOK_9dfsfs782253151593_1597229931728\",\n    \"document\": {\n        \"id\": 16\n    },\n    \"library\": {\n        \"id\": 25,\n        \"name\": \"Grande bibliothèque de Lyon\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/exemplars",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"exemplars"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update exemplar, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0785b7fd-938d-42b3-9541-52c66308ef98",
										"exec": [
											"pm.test('Unauthorizes status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 122,\n    \"reference\": \"BOOK_9dfsfs782253151593_1597229931728\",\n    \"document\": {\n        \"id\": 16\n    },\n    \"library\": {\n        \"id\": 25,\n        \"name\": \"Grande bibliothèque de Lyon\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/exemplars/122",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"exemplars",
										"122"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete exemplar, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06edb294-0d70-4a34-a96e-92d53738c15b",
										"exec": [
											"pm.test('Unauthorizes status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/exemplars/122",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"exemplars",
										"122"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Library",
					"item": [
						{
							"name": "Get all libraries, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edaac299-8933-4fb3-be90-24ced925b26f",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/libraries",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"libraries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get library by id, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a94cca20-206e-47f6-8480-ba9b7560e421",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/libraries/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"libraries",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create library, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba97ea6f-fb36-412c-8661-1ba3f483c221",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 452,\n    \"name\": \"library name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/libraries",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"libraries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update library, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f848446-47f8-4092-905c-9271f1ef1b27",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 452,\n    \"name\": \"library name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/libraries/452",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"libraries",
										"452"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete library, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2b907c32-9051-4e9a-8e5a-4adee1c7ca1f",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/libraries/452",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"libraries",
										"452"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Loan",
					"item": [
						{
							"name": "Get all loans, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23b60b6b-deee-4230-b51b-43a8982a5fee",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/loans",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"loans"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all loans by user id, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46659b21-5c15-4f56-add4-fdbdb781de98",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/loans/users/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"loans",
										"users",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all ended loans, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea6e1397-99a1-4246-99aa-8b520e4e12ce",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/loans/ended",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"loans",
										"ended"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create loan, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ca996d8-2fae-4725-a87f-d3802708466f",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"startDate\": \"2020-12-02\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/loans",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"loans"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update loan, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c932a9c-64b7-40cd-a456-9b8969e1096a",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"startDate\": \"2020-12-02\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/loans/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"loans",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete loan, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a8da114-597a-48c9-8f92-035bf2f5efab",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/loans/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"loans",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Renew loan, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "29bc1ca1-b928-40c1-a7f6-438b9f153869",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/loans/1/renewal",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"loans",
										"1",
										"renewal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return exemplar, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8bf31d34-2abd-44f5-9cd5-46585d92b638",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/loans/1/return",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"loans",
										"1",
										"return"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Publisher",
					"item": [
						{
							"name": "Get all publishers, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb6e0efb-10de-4d6f-b1a9-fe75465864bd",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/publishers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"publishers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get publisher by id, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c304c0b-8a7b-4240-b336-45e5b0fa7d34",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/publishers/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"publishers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create publisher, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93b8b5df-e173-48f7-ba18-279d43dbd3ba",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 12,\n    \"name\": \"publisher name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/publishers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"publishers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update publisher, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "48720f2b-0b45-4af3-846d-9ff6e11652a7",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 12,\n    \"name\": \"publisher name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/publishers/12",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"publishers",
										"12"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete publisher, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77f8ae73-11c2-4bf5-aa22-3ff197787bb1",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/publishers/12",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"publishers",
										"12"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UserWaitingList",
					"item": [
						{
							"name": "Get userWaitingList by user id, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f33aeff-f4e6-48b0-ada3-3429d1224495",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/waitingLists/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"waitingLists",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get first userWaitingList by waitingList id, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d70e79f-e0a2-4d96-b0c0-78e9647e0ade",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/waitingLists/firstUser/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"waitingLists",
										"firstUser",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add user to waitingList, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9491aef8-1ade-4c6a-88f2-14f1d2eac34e",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/waitingLists",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"waitingLists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update userWaitingList, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4055954b-26c8-462e-ba0a-b446670fc5ca",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/waitingLists",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"waitingLists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete userWaitingList, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5df4ac3c-4bf8-4f2f-b016-1456ec441982",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/waitingLists/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"waitingLists",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete all expired userWaitingList, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bddafca5-c38f-4109-b839-62c5ff7754b1",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/waitingLists/expired",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"waitingLists",
										"expired"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "it tests all controller methods with unauthenticated requests",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9af5f98b-886a-48fc-bb3b-b05774efeb74",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4886c5e1-ffe8-4f61-b72c-8cfa30857a03",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Authenticated requests",
			"item": [
				{
					"name": "Role admin",
					"item": [
						{
							"name": "Library",
							"item": [
								{
									"name": "Get all libraries, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2d91999-2e6a-4a96-acec-ba626ba4ef30",
												"exec": [
													"const results = [",
													"    {",
													"        \"id\": 1,",
													"        \"name\": \"Bibliothèque Stephen King\"",
													"    },",
													"    {",
													"        \"id\": 25,",
													"        \"name\": \"Grande bibliothèque de Lyon\"",
													"    },",
													"    {",
													"        \"id\": 26,",
													"        \"name\": \"Bibliothèque Voltaire\"",
													"    }",
													"];",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Results test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(results);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/libraries",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get library id 25, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95c6ac9e-9e8b-478d-8b36-4d261d4569d4",
												"exec": [
													"const result = {",
													"        \"id\": 25,",
													"        \"name\": \"Grande bibliothèque de Lyon\"",
													"    };",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Results test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(result);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/libraries/25",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries",
												"25"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get library id 52, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b372b73-f337-4f67-941a-d1048645e6c0",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/libraries/52",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries",
												"52"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create library, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c158da37-5476-43d3-8f09-baf8cfb35e1a",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()['name']).to.equal('Biblio test');",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Biblio test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/libraries",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create library, invalid body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99f38094-7ad0-421c-8636-262c783880ab",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"namesq\": \"Biblio test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/libraries",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update library, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5f0abc1-3ce7-4693-960e-ebe104f86d2d",
												"exec": [
													"const result = {",
													"    \"id\": 25,",
													"    \"name\": \"Grande bibliothèque de Lyon update\"",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(result);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 25,\n    \"name\": \"Grande bibliothèque de Lyon update\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/libraries/25",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries",
												"25"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update library, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "594dd72b-2de7-45c4-9aab-90f95880eb98",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 52,\n    \"name\": \"test update\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/libraries/52",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries",
												"52"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Author",
							"item": [
								{
									"name": "Get all authors, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80f660ee-0641-499e-a3d8-a445922e7914",
												"exec": [
													"const results = [",
													"    {",
													"        \"id\": 2,",
													"        \"lastName\": \"De Saint-Exupéry\",",
													"        \"firstName\": \"Antoine\"",
													"    },",
													"    {",
													"        \"id\": 6,",
													"        \"lastName\": \"King\",",
													"        \"firstName\": \"Stephen\"",
													"    },",
													"    {",
													"        \"id\": 7,",
													"        \"lastName\": \"Coben\",",
													"        \"firstName\": \"Harlan\"",
													"    },",
													"    {",
													"        \"id\": 8,",
													"        \"lastName\": \"Lemire\",",
													"        \"firstName\": \"Jeff\"",
													"    },",
													"    {",
													"        \"id\": 9,",
													"        \"lastName\": \"Willingham\",",
													"        \"firstName\": \"Bill\"",
													"    },",
													"    {",
													"        \"id\": 21,",
													"        \"lastName\": \"Meyer\",",
													"        \"firstName\": \"Bertrand\"",
													"    }",
													"];",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Results test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(results);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/authors",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get author id 21, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b48b51d-373a-48d5-ad78-ce89e525fc30",
												"exec": [
													"const result = {",
													"        \"id\": 21,",
													"        \"lastName\": \"Meyer\",",
													"        \"firstName\": \"Bertrand\"",
													"    };",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Results test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(result);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/authors/21",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors",
												"21"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get author id 71, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22bef83c-66b3-4465-ac39-c791b24b5c88",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/authors/71",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors",
												"71"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create author, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "010e285f-3fc8-4e89-9d42-c8de858b4ae2",
												"exec": [
													"const responseJson = pm.response.json();",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200)",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(responseJson.lastName).to.equal('test name');",
													"    pm.expect(responseJson.firstName).to.equal('test firstname');",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"lastName\": \"test name\",\n    \"firstName\": \"test firstname\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/authors",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create author, invalid body, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01ba77b5-11e3-495d-aeab-fac7f3e84152",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"test name\",\n    \"firstName\": \"test firstname\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/authors",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update author, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8a13fc-b8ca-4c18-96c9-794cca11251e",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 21,",
													"    \"lastName\": \"Test\",",
													"    \"firstName\": \"test\"",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200)",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(resultExpected);",
													"})",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 21,\n    \"lastName\": \"Test\",\n    \"firstName\": \"test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/authors/21",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors",
												"21"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update author, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "714ff6bd-5d6d-4205-9ed5-c768907481f7",
												"exec": [
													"pm.test('Internal server status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 997,\n    \"lastName\": \"Test\",\n    \"firstName\": \"test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/authors/997",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors",
												"997"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Document",
							"item": [
								{
									"name": "Get all documents, default page, no search criteria",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "664eecff-d9f9-4fb4-876c-e82b0e78b4ee",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Total pages test', function() {",
													"    pm.expect(responseJson.totalPages).to.equal(2);",
													"})",
													"pm.test('Total elements test', function() {",
													"    pm.expect(responseJson.totalElements).to.equal(9);",
													"})",
													"pm.test('First page test', function() {",
													"    pm.expect(responseJson.first).to.equal(true);",
													"})",
													"pm.test('Page size', function() {",
													"    pm.expect(responseJson.size).to.equal(6);",
													"})",
													"pm.test('Page number of elements', function() {",
													"    pm.expect(responseJson.numberOfElements).to.equal(6);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all documents, page 2, no search criteria",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edec0543-0a33-4253-bc3a-c79ded892ce5",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Last page test', function() {",
													"    pm.expect(responseJson.last).to.equal(true);",
													"})",
													"pm.test('First page test', function() {",
													"    pm.expect(responseJson.first).to.equal(false);",
													"})",
													"pm.test('Page number test', function() {",
													"    pm.expect(responseJson.number).to.equal(1);",
													"})",
													"pm.test('Page number of elements', function() {",
													"    pm.expect(responseJson.numberOfElements).to.equal(3);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents?page=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all documents, default page, search by author",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a1855cd-ab4c-4415-8f0b-6e8930d56682",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Last page test', function() {",
													"    pm.expect(responseJson.last).to.equal(true);",
													"})",
													"pm.test('First page test', function() {",
													"    pm.expect(responseJson.first).to.equal(true);",
													"})",
													"pm.test('Page number test', function() {",
													"    pm.expect(responseJson.number).to.equal(0);",
													"})",
													"pm.test('Page number of elements', function() {",
													"    pm.expect(responseJson.numberOfElements).to.equal(3);",
													"})",
													"pm.test('Author name test', function() {",
													"    responseJson.content.forEach(element => pm.expect(element.authorLastName).to.equal('King'));",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents?authorName=King",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											],
											"query": [
												{
													"key": "authorName",
													"value": "King"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all documents, default page, search by category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38e81486-90fc-4e4b-9b66-ea81f7a26de5",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Last page test', function() {",
													"    pm.expect(responseJson.last).to.equal(true);",
													"})",
													"pm.test('First page test', function() {",
													"    pm.expect(responseJson.first).to.equal(true);",
													"})",
													"pm.test('Page number test', function() {",
													"    pm.expect(responseJson.number).to.equal(0);",
													"})",
													"pm.test('Page number of elements', function() {",
													"    pm.expect(responseJson.numberOfElements).to.equal(2);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents?category=Thriller",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											],
											"query": [
												{
													"key": "category",
													"value": "Thriller"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a document by id, success, can't be reserved because there are exemplars available",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c872d63-8187-459a-815a-2059e7833a72",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 22, ",
													"    \"title\" : \"Conception et programmation orientée objet\",",
													"    \"publicationDate\": \"2017-10-26\",",
													"    \"type\": \"Livre\",",
													"    \"category\": \"Informatique\",",
													"    \"canBeReserved\": false",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.include(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents/22?userId=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"22"
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a document by id, can be reserved because no exemplar available and this user has neither borrowed nor reserved the document",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a165d206-512f-469c-ae23-e4544e5d526e",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 16,",
													"    \"title\": \"Brume\",",
													"    \"isbn\": \"978-2-253-15159-3\",",
													"    \"publicationDate\": \"2006-06-07\",",
													"    \"type\": \"Livre\",",
													"    \"category\": \"Science-Fiction\",",
													"    \"waitingList\": {",
													"        \"id\": 3,",
													"        \"size\": 2,",
													"        \"full\": false,",
													"        \"documentTitle\": \"Brume\",",
													"        \"documentId\": 16,",
													"        \"endDateNextLoanReturn\": \"2020-09-07\",",
													"        \"numberUsersInWaitingList\": 0",
													"    },",
													"    \"canBeReserved\": true",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.include(resultExpected);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents/16?userId=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"16"
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a document by id, can't be reserved because this user has already reserved it",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d20138b-bf05-41cd-8c54-41605c2b7943",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 24,",
													"    \"title\": \"Fables intégrale volume 1\",",
													"    \"isbn\": \"979-10-268-1391-0\",",
													"    \"publicationDate\": \"2018-01-19\",",
													"    \"waitingList\": {",
													"        \"id\": 9,",
													"        \"size\": 4,",
													"        \"full\": false,",
													"        \"documentTitle\": \"Fables intégrale volume 1\",",
													"        \"documentId\": 24,",
													"        \"endDateNextLoanReturn\": \"2020-10-15\",",
													"        \"numberUsersInWaitingList\": 1",
													"    },",
													"    \"canBeReserved\": false",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.include(resultExpected);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents/24?userId=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"24"
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document by id, unkown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b33d386c-4310-4908-a38a-5fea826e7f0e",
												"exec": [
													"pm.test('Internal server error test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents/999?userId=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"999"
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create document, success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ab712d62-cedb-45d6-a36f-e0bf1da3d300",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "86ddca9a-a709-45b3-acd8-d53290cfe142",
												"exec": [
													"const resultExpected = {",
													"    \"title\": \"test document\",",
													"    \"isbn\": \"test-document-isbn\",",
													"    \"description\": \"test document description\",",
													"    \"publicationDate\": \"2020-12-03\",",
													"    \"type\": \"Livre\",",
													"    \"category\": \"Science-Fiction\",",
													"    \"photo\": null",
													"};",
													"",
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(responseJson).to.deep.include(resultExpected);",
													"});",
													"pm.test('Author test', function() {",
													"    pm.expect(responseJson.author.id).to.equal(7);",
													"});",
													"pm.test('Publisher test', function() {",
													"    pm.expect(responseJson.publisher.id).to.equal(3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"test document\",\n    \"isbn\": \"test-document-isbn\",\n    \"description\": \"test document description\",\n    \"publicationDate\": \"2020-12-03\",\n    \"publisher\" : {\n        \"id\": 3\n    },\n    \"author\": {\n        \"id\" : 7\n    },\n    \"type\": \"Livre\",\n    \"category\": \"Science-Fiction\",\n    \"photo\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/documents",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create document, invalid body, internal server error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "79997314-29a7-4a8e-8734-08631d7f4eab",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b33e35e0-567e-4ac6-b3aa-cb530f9e93fe",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"test document\",\n    \"isbn\": \"test-document-isbn\",\n    \"description\": \"test document description\",\n    \"publicationDate\": \"2020-12-03\",\n    \"publisher\" : {\n        \"id\": 345\n    },\n    \"author\": {\n        \"id\" : 79996\n    },\n    \"type\": \"Livre\",\n    \"category\": \"Science-Fiction\",\n    \"photo\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/documents",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update document, success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f7e944ec-b46e-4db0-9dbc-4942902efc14",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0ae035ac-b656-458c-b94f-b98afddacd10",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 22, ",
													"    \"publicationDate\": \"2017-12-26\"",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.include(resultExpected);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 22,\n    \"title\": \"Conception et programmation orientée objet\",\n    \"isbn\": \"978-2-212-67500-9\",\n    \"description\": \"Réédition d'un des plus grands classiques de la littérature informatique. Ecrit dans un style d'une clarté absolue, cet ouvrage réussit le tour de force d'être à la fois un livre de réflexion approfondie sur les concepts objet et un ouvrage pratique, apportant des réponses concrètes aux questions que se posent tous les programmeurs et concepteurs de logiciels : comment construire des applications logicielles fiables, performantes, faciles à utiliser et à faire évoluer ? Théorie du typage, gestion de la mémoire, techniques d'héritage, programmation concurrente, objets distribués, persistance et bases de données objet, analyse et conception, réutilisabilité... Tous les aspects du processus de développement logiciel et des technologies objet sont expliqués et discutés dans leurs moindres détails, dans un style brillant, souvent drôle et provocateur.\",\n    \"publicationDate\": \"2017-12-26\",\n    \"publisher\": {\n        \"id\": 12,\n        \"name\": \"Eyrolles\"\n    },\n    \"author\": {\n        \"id\": 21,\n        \"lastName\": \"Meyer\",\n        \"firstName\": \"Bertrand\"\n    },\n    \"type\": \"Livre\",\n    \"category\": \"Informatique\",\n    \"waitingList\": {\n        \"id\": 7,\n        \"size\": 2,\n        \"full\": false,\n        \"documentTitle\": \"Conception et programmation orientée objet\",\n        \"documentId\": 22,\n        \"endDateNextLoanReturn\": null,\n        \"numberUsersInWaitingList\": 0\n    },\n    \"canBeReserved\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/documents/22",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"22"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update document, unknown entity, internal server error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b5647cd3-3c82-4c79-800d-4e93b8b22bf4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fb51eb11-633a-4fd6-88e3-63601c46a67d",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 2222,\n    \"title\": \"Conception et programmation orientée objet\",\n    \"isbn\": \"978-2-212-67500-9\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/documents/2222",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"2222"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Exemplar",
							"item": [
								{
									"name": "Get all available exemplars by document id = 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "893bd72c-79f8-487d-a83c-d50e01f33dd3",
												"exec": [
													"pm.test('Status success test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/exemplars?documentId=4",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars"
											],
											"query": [
												{
													"key": "documentId",
													"value": "4"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all available exemplars by document id = 16",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec019cf2-e942-47a9-9c88-1549751cbb73",
												"exec": [
													"pm.test('Status success test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test('Results test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal([]);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/exemplars?documentId=16",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars"
											],
											"query": [
												{
													"key": "documentId",
													"value": "16"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get exemplar id 47",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95a5c151-fbba-436c-a9b2-916dceb92c1c",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status success test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Result test', function() {",
													"    console.log('reponse', responseJson);",
													"    pm.expect(responseJson.id).to.equal(38);",
													"    pm.expect(responseJson.document.id).to.equal(16);",
													"    pm.expect(responseJson.document.title).to.equal(\"Brume\");",
													"    pm.expect(responseJson.document.publisher.id).to.equal(10);",
													"    pm.expect(responseJson.document.author.id).to.equal(6);",
													"    pm.expect(responseJson.library.id).to.equal(25);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/exemplars/38",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars",
												"38"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get exemplar id 256 not exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff47db54-286e-494b-85cc-51d078230efb",
												"exec": [
													"pm.test('Internal server error test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/exemplars/256",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars",
												"256"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create exemplar, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1bef0ede-6f2b-48ca-8ddb-b230a96bba47",
												"exec": [
													"const resultExpected = {",
													"    \"document\": {",
													"        \"id\": 16",
													"    },",
													"    \"library\": {",
													"        \"id\": 25",
													"    }",
													"};",
													"",
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(responseJson.document).to.include(resultExpected.document);",
													"    pm.expect(responseJson.library).to.include(resultExpected.library);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document\": {\n        \"id\": 16\n    },\n    \"library\": {\n        \"id\": 25,\n        \"name\": \"Grande bibliothèque de Lyon\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/exemplars",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create exemplar, invalid body, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa635590-98b6-468b-a6c4-5dc7777b6929",
												"exec": [
													"pm.test('Internal server error', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document\": {\n        \"id\": 1679\n    },\n    \"library\": {\n        \"id\": 25\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/exemplars",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update exemplar, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "836336e6-4aae-4bde-bf4b-bd041e76196b",
												"exec": [
													"const responseJson = pm.response.json();",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(responseJson.id).to.equal(38);",
													"    pm.expect(responseJson.reference).to.equal(\"BOOK_9782253151593_1597229931728test\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 38,\n    \"reference\": \"BOOK_9782253151593_1597229931728test\",\n    \"document\": {\n        \"id\": 16,\n        \"title\": \"Brume\",\n        \"isbn\": \"978-2-253-15159-3\",\n        \"description\": \"Imaginez une brume qui s'abat soudainement sur une petite ville, une brume si épaisse que les clients d'un supermarché hésitent à en ressortir. Il n'en faut pas davantage au maître de l'épouvante pour nous plonger dans le cauchemar avec un réalisme hallucinant. Chacune des nouvelles de ce volume possède le même pouvoir ensorcelant. Vous serez terrifié par un petit singe en peluche qui joue des cymbales. Vous redouterez de voir surgir le fantôme d'un... camion. Vous saurez de quoi est capable un naufragé solitaire, lorsque la faim le tenaille et que la drogue décuple son courage. L'art de faire surgir l'effrayant ou le surnaturel au cœur d'un monde rassurant et prosaïque... Les superbes décors du Maine, où vit Stephen King, se révèlent une fois encore peuplés de sortilèges et de malédictions. \",\n        \"publicationDate\": \"2006-06-07\",\n        \"publisher\": {\n            \"id\": 10,\n            \"name\": \"Livre de poche\"\n        },\n        \"author\": {\n            \"id\": 6,\n            \"lastName\": \"King\",\n            \"firstName\": \"Stephen\"\n        },\n        \"type\": \"Livre\",\n        \"category\": \"Science-Fiction\",\n        \"photo\": {\n            \"id\": 2,\n            \"name\": \"978-2-253-15159-3.jpg\",\n            \"extension\": \"jpg\",\n            \"fileToBase64String\": null\n        },\n        \"waitingList\": {\n            \"id\": 3,\n            \"size\": 10,\n            \"full\": false,\n            \"documentTitle\": \"Brume\",\n            \"documentId\": 16,\n            \"endDateNextLoanReturn\": null,\n            \"numberUsersInWaitingList\": 0\n        },\n        \"canBeReserved\": true\n    },\n    \"library\": {\n        \"id\": 25,\n        \"name\": \"Grande bibliothèque de Lyon\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/exemplars/47",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars",
												"47"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update exemplar, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11f4f3e5-4cb7-4d8e-9134-474e8a06b4a2",
												"exec": [
													"pm.test('Internal server error test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 474,\n    \"reference\": \"BOOK_9782253151593_1597229931728test\",\n    \"document\": {\n        \"id\": 16,\n        \"title\": \"Brume\",\n        \"isbn\": \"978-2-253-15159-3\",\n        \"description\": \"Imaginez une brume qui s'abat soudainement sur une petite ville, une brume si épaisse que les clients d'un supermarché hésitent à en ressortir. Il n'en faut pas davantage au maître de l'épouvante pour nous plonger dans le cauchemar avec un réalisme hallucinant. Chacune des nouvelles de ce volume possède le même pouvoir ensorcelant. Vous serez terrifié par un petit singe en peluche qui joue des cymbales. Vous redouterez de voir surgir le fantôme d'un... camion. Vous saurez de quoi est capable un naufragé solitaire, lorsque la faim le tenaille et que la drogue décuple son courage. L'art de faire surgir l'effrayant ou le surnaturel au cœur d'un monde rassurant et prosaïque... Les superbes décors du Maine, où vit Stephen King, se révèlent une fois encore peuplés de sortilèges et de malédictions. \",\n        \"publicationDate\": \"2006-06-07\",\n        \"publisher\": {\n            \"id\": 10,\n            \"name\": \"Livre de poche\"\n        },\n        \"author\": {\n            \"id\": 6,\n            \"lastName\": \"King\",\n            \"firstName\": \"Stephen\"\n        },\n        \"type\": \"Livre\",\n        \"category\": \"Science-Fiction\",\n        \"photo\": {\n            \"id\": 2,\n            \"name\": \"978-2-253-15159-3.jpg\",\n            \"extension\": \"jpg\",\n            \"fileToBase64String\": null\n        },\n        \"waitingList\": {\n            \"id\": 3,\n            \"size\": 10,\n            \"full\": false,\n            \"documentTitle\": \"Brume\",\n            \"documentId\": 16,\n            \"endDateNextLoanReturn\": null,\n            \"numberUsersInWaitingList\": 0\n        },\n        \"canBeReserved\": true\n    },\n    \"library\": {\n        \"id\": 25,\n        \"name\": \"Grande bibliothèque de Lyon\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/exemplars/474",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars",
												"474"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Loan",
							"item": [
								{
									"name": "Get all loans",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a80d6e2-6bc0-4e1e-888d-45a413eff973",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json().length).to.equal(6);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all loans by user id, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f169d01-a48e-4433-8bfe-70564b77f62e",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json().length).to.equal(3);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/users/2",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"users",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all loans by user id, unknown user, empty array",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5624df3d-8215-4c3e-a3fe-4c82b5694aa7",
												"exec": [
													"pm.test('Internal server error test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/users/99",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"users",
												"99"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all ended loans, Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91972fe1-84af-4061-bf30-c3d0149245a0",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    console.log(pm.response.json().size);",
													"    pm.expect(pm.response.json().length).to.gte(2);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/ended",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"ended"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create loan, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6329c39-4f91-4385-9afa-a3df735ca041",
												"exec": [
													"const resultExpected = {",
													"    \"renewed\": false,",
													"    \"user\": {",
													"        \"id\": 1,",
													"        \"username\": \"admin\",",
													"        \"email\": \"lesbiblios@gmail.com\"",
													"    },",
													"    \"exemplar\": {",
													"        \"id\": 27,",
													"        \"reference\": \"BOOK_9782070612758_1597229871157\",",
													"        \"library\": {",
													"            \"id\": 1,",
													"            \"name\": \"Bibliothèque Stephen King\"",
													"        },",
													"        \"loanEndDate\": null,",
													"        \"documentTitle\": \"Le petit prince\"",
													"    }",
													"};",
													"",
													"pm.test('Unauthorized status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.include(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user\": {\n        \"id\": 1\n    },\n    \"exemplar\": {\n        \"id\": 27\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/loans",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create loan, invalid body, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "098aa479-f260-4047-9e4e-066db38fd336",
												"exec": [
													"pm.test('Internal server error test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"startDate\": \"2020-03-12\",\n    \"user\": {\n        \"id\": 1894\n    },\n    \"exemplar\": {\n        \"id\": 27774\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/loans",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update loan, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66a57389-35db-4304-8275-b9076b6fa22d",
												"exec": [
													"const responseJson = pm.response.json();",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(responseJson.id).to.equal(4);",
													"    pm.expect(responseJson.startDate).to.equal(\"2020-07-18\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"id\": 4,\n        \"startDate\": \"2020-07-18\",\n        \"endDate\": \"2020-08-15\",\n        \"renewed\": false,\n        \"user\": {\n            \"id\": 2,\n            \"username\": \"user1\",\n            \"email\": \"user1@email.com\"\n        },\n        \"exemplar\": {\n            \"id\": 30,\n            \"reference\": \"BOOK_9782070612758_1597229880162\",\n            \"library\": {\n                \"id\": 25,\n                \"name\": \"Grande bibliothèque de Lyon\"\n            },\n            \"loanEndDate\": null,\n            \"documentTitle\": \"Le petit prince\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/loans/4",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update loan, unkonwn entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffd2c6e7-6bad-4164-9cde-4454328847a5",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"id\": 4458,\n        \"startDate\": \"2020-07-18\",\n        \"endDate\": \"2020-08-15\",\n        \"renewed\": false,\n        \"user\": {\n            \"id\": 2,\n            \"username\": \"user1\",\n            \"email\": \"user1@email.com\"\n        },\n        \"exemplar\": {\n            \"id\": 30,\n            \"reference\": \"BOOK_9782070612758_1597229880162\",\n            \"library\": {\n                \"id\": 25,\n                \"name\": \"Grande bibliothèque de Lyon\"\n            },\n            \"loanEndDate\": null,\n            \"documentTitle\": \"Le petit prince\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/loans/4458",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"4458"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete loan, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "644fe00a-9a3b-4fad-a75c-d95860a86fcd",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/4",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete loan, unknown entity, not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9026bc98-d3ae-4d40-95f4-96519bfc4650",
												"exec": [
													"pm.test('Not found status test', function() {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/45236",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"45236"
											]
										}
									},
									"response": []
								},
								{
									"name": "Renew loan, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8eccf995-6dff-46b9-bf0a-3764b7f26fdf",
												"exec": [
													"pm.test('Bad request status test', function() {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "38bcba00-47b9-4265-91c4-3d6bf58aa962",
												"exec": [
													"const req = {",
													"    url: 'http://localhost:8080/api/loans',",
													"    method: 'POST',",
													"    header: [",
													"        {",
													"            key: 'Content-Type',",
													"            value: 'application/json'",
													"        },",
													"        {",
													"            key: 'Authorization',",
													"            value: 'Bearer ' + pm.environment.get('accessToken')",
													"        }",
													"    ],",
													"    body: {",
													"    mode: 'application/json',",
													"    raw: JSON.stringify(",
													"        {",
													"            user: {",
													"                id: 1",
													"            },",
													"            exemplar: {",
													"                id: 41",
													"            }",
													"        })",
													"  }",
													"};",
													"pm.sendRequest(req, function (err, res) {",
													"console.log(err ? err : res.json());",
													"    if (err === null) {",
													"        var responseJson = res.json();",
													"        console.log('save loanId ' + responseJson.id);",
													"        pm.environment.set('loanId', responseJson.id);",
													"        pm.environment.set('loanStartDate', responseJson.startDate);",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/{{loanId}}/renewal",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"{{loanId}}",
												"renewal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Renew loan, end date before current date, bad request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b7e7d36-b592-47c2-8e7b-fac7529cf9e1",
												"exec": [
													"pm.test('Bad request status test', function() {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/4/renewal",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"4",
												"renewal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Renew loan, loan has already been renewed, bad request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60451fac-c7f6-4b70-ac52-a26126c54f34",
												"exec": [
													"pm.test('Bad request status test', function() {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/5/renewal",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"5",
												"renewal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Return exemplar, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a012fbe9-2961-4916-884d-c1377aa82ee1",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/6/return",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"6",
												"return"
											]
										}
									},
									"response": []
								},
								{
									"name": "Return exemplar, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8225324e-fb60-478d-a6be-f9773456c37c",
												"exec": [
													"pm.test('Bad request status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/155563/return",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"155563",
												"return"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Publisher",
							"item": [
								{
									"name": "Get all publishers, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2cffed5c-1bbe-472f-850b-09e33528b283",
												"exec": [
													"const resultExpected = [",
													"    {",
													"        \"id\": 3,",
													"        \"name\": \"Gallimard\"",
													"    },",
													"    {",
													"        \"id\": 10,",
													"        \"name\": \"Livre de poche\"",
													"    },",
													"    {",
													"        \"id\": 11,",
													"        \"name\": \"Pocket\"",
													"    },",
													"    {",
													"        \"id\": 12,",
													"        \"name\": \"Eyrolles\"",
													"    },",
													"    {",
													"        \"id\": 13,",
													"        \"name\": \"Urban comics\"",
													"    }",
													"];",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/publishers",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get publisher by id, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6dc1f6e3-23ec-4572-9b39-7eec37783490",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 3,",
													"    \"name\": \"Gallimard\"",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/publishers/3",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get publisher by id, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf5872ec-3297-46e5-a64e-39e9ef742705",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/publishers/3452",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers",
												"3452"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create publisher, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "141c2a03-141e-4535-a472-e44037b7be1b",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json().name).to.equal('publisher name')",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"publisher name\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/publishers",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create publisher, invalid body, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ab994b0-2a02-452b-8b01-08a420a7e7f7",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"nadssdme\": \"publisher name\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/publishers",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update publisher, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2a89b38-1d84-410b-bf11-aa81d14a27f3",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 3,",
													"    \"name\": \"Test\"",
													"};",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 3,\n    \"name\": \"Test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/publishers/3",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update publisher, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3eed8077-15de-4d5f-a1ed-1f6507723a61",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 333,\n    \"name\": \"Test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/publishers/333",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers",
												"333"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "UserWaitingList",
							"item": [
								{
									"name": "Get userWaitingList by user id, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e922d1c-993f-4f22-a79a-0e558f620fa0",
												"exec": [
													"const resultExpected = [",
													"    {",
													"        \"id\": 1,",
													"        \"user\": {",
													"            \"id\": 1,",
													"            \"username\": \"admin\",",
													"            \"password\": \"$2a$10$vzGGdpg2SYq4BA7JKo9mb.duAxvY2FMP2f23mArYgtIsm7cKzqWPa\",",
													"            \"email\": \"lesbiblios@gmail.com\",",
													"            \"roles\": [",
													"                {",
													"                    \"id\": 0,",
													"                    \"name\": \"ROLE_ADMIN\"",
													"                }",
													"            ]",
													"        },",
													"        \"waitingList\": {",
													"            \"id\": 9,",
													"            \"size\": 4,",
													"            \"full\": false,",
													"            \"documentTitle\": \"Fables intégrale volume 1\",",
													"            \"documentId\": 24,",
													"            \"endDateNextLoanReturn\": \"2020-10-15\",",
													"            \"numberUsersInWaitingList\": 1",
													"        },",
													"        \"userPosition\": 1,",
													"        \"mailingDate\": null",
													"    },",
													"    {",
													"        \"id\": 3,",
													"        \"user\": {",
													"            \"id\": 1,",
													"            \"username\": \"admin\",",
													"            \"password\": \"$2a$10$vzGGdpg2SYq4BA7JKo9mb.duAxvY2FMP2f23mArYgtIsm7cKzqWPa\",",
													"            \"email\": \"lesbiblios@gmail.com\",",
													"            \"roles\": [",
													"                {",
													"                    \"id\": 0,",
													"                    \"name\": \"ROLE_ADMIN\"",
													"                }",
													"            ]",
													"        },",
													"        \"waitingList\": {",
													"            \"id\": 8,",
													"            \"size\": 2,",
													"            \"full\": false,",
													"            \"documentTitle\": \"Black Hammer Tome 3 : L'heure du jugement\",",
													"            \"documentId\": 23,",
													"            \"endDateNextLoanReturn\": \"2020-12-17\",",
													"            \"numberUsersInWaitingList\": 2",
													"        },",
													"        \"userPosition\": 2,",
													"        \"mailingDate\": null",
													"    }",
													"];",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/waitingLists/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get userWaitingList by user id, unknown entity, empty list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3fed8d3b-9f05-45a9-922c-6e7ea631ebd4",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.empty;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/waitingLists/1663",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists",
												"1663"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get first userWaitingList by waitingList id, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5438f550-92af-4bb1-824a-1cc5508abb2b",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 1,",
													"    \"user\": {",
													"        \"id\": 1,",
													"        \"username\": \"admin\",",
													"        \"password\": \"$2a$10$vzGGdpg2SYq4BA7JKo9mb.duAxvY2FMP2f23mArYgtIsm7cKzqWPa\",",
													"        \"email\": \"lesbiblios@gmail.com\",",
													"        \"roles\": [",
													"            {",
													"                \"id\": 0,",
													"                \"name\": \"ROLE_ADMIN\"",
													"            }",
													"        ]",
													"    },",
													"    \"waitingList\": {",
													"        \"id\": 9,",
													"        \"size\": 4,",
													"        \"full\": false,",
													"        \"documentTitle\": \"Fables intégrale volume 1\",",
													"        \"documentId\": 24,",
													"        \"endDateNextLoanReturn\": null,",
													"        \"numberUsersInWaitingList\": 0",
													"    },",
													"    \"userPosition\": 1,",
													"    \"mailingDate\": null",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/waitingLists/firstUser/9",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists",
												"firstUser",
												"9"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user to waitingList, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f05a5205-e8b5-432b-a834-fd2a2d449148",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user\": {\n        \"id\": 3\n    },\n    \"waitingList\": {\n        \"id\": 9\n    },\n    \"userPosition\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/waitingLists",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user to waitingList, unknonw entity, not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca9dc624-30fd-4a24-9b54-d61e6028e03a",
												"exec": [
													"pm.test('Not found status test', function() {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user\": {\n        \"id\": 34545\n    },\n    \"waitingList\": {\n        \"id\": 9\n    },\n    \"userPosition\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/waitingLists",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user to waitingList, waitinList full, bad request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7de5c22-c1d2-49c7-967a-2ba61935caa2",
												"exec": [
													"pm.test('Bad request status test', function() {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user\": {\n        \"id\": 1\n    },\n    \"waitingList\": {\n        \"id\": 8\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/waitingLists",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update userWaitingList, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20e2a8fb-340d-4134-9827-70847e67ac32",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"id\": 1,\n        \"userPosition\": 1,\n        \"mailingDate\": \"2021-12-03\"\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/waitingLists",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update userWaitingList, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45ae76fa-3a5a-43e4-945c-c4cb9c62d239",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"id\": 198453,\n        \"userPosition\": 1,\n        \"mailingDate\": \"2021-12-03\"\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/waitingLists",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete userWaitingList, success, change position of next users",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18f1b8a4-741f-4287-b11e-160699d9f5e2",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/waitingLists/2",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete userWaitingList, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64d1d195-2a28-4b30-ae46-05d5b218cc6f",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/waitingLists/25559",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists",
												"25559"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8b907735-03e9-4c2d-ae08-d9246b06ddc1",
								"type": "text/javascript",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://localhost:8080/api/auth/signin',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"        \tusername: 'admin',",
									"            password: 'admin'",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"console.log(err ? err : res.json());",
									"    if (err === null) {",
									"        console.log('Saving the token')",
									"        var responseJson = res.json();",
									"        pm.environment.set('accessToken', responseJson.token)",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b47ddbeb-9795-4d61-8922-c5ea8b33b472",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Role user",
					"item": [
						{
							"name": "Library",
							"item": [
								{
									"name": "Get all libraries, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1105f9d5-63b3-4640-877b-215674f18852",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/libraries",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get library by id, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8278996-8dea-4715-82d1-c072b0fb1fb5",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/libraries/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create library, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e1a5874-47d8-49f7-b463-8390496259dc",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 452,\n    \"name\": \"library name\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/libraries",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update library, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1b76118-9bda-49f8-8271-1cda1a96473f",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 452,\n    \"name\": \"library name\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/libraries/452",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries",
												"452"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete library, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c0385d9-8802-44f1-9e27-1366c6e951d8",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/libraries/452",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries",
												"452"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Author",
							"item": [
								{
									"name": "Get all authors, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6024f35-67ab-4058-adf3-492c268a4fbb",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/authors",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get author id 1, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf7d7e33-ab85-4874-8140-2035ba5575db",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/authors/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create author, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a3a0f56-9a2d-437c-92ac-2b519bd66abf",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 71,\n    \"lastName\": \"lastName\",\n    \"firstName\": \"firstName\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/authors",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update author, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bded4c6c-799f-43cf-8869-d965eb3d8c0d",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 71,\n    \"lastName\": \"lastName\",\n    \"firstName\": \"firstName\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/authors/71",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors",
												"71"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete author, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63dbe931-5c68-45f7-bc16-dcbd16d3c9d2",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/authors/71",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors",
												"71"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Publisher",
							"item": [
								{
									"name": "Get all publishers, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05dd250a-8e3f-4401-91ce-74abd889a37c",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/publishers",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get publisher by id, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9759c23f-da40-447e-b914-311e82f7c1d2",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/publishers/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create publisher, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44fe57e5-859d-435d-a375-b9d64af892a5",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 12,\n    \"name\": \"publisher name\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/publishers",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update publisher, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e204a5b-f47a-41e7-b71a-3bef5ce2902e",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 12,\n    \"name\": \"publisher name\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/publishers/12",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers",
												"12"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete publisher, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87d0a996-48b5-40aa-8de2-740f884cbc4d",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/publishers/12",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers",
												"12"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Document",
							"item": [
								{
									"name": "Get all documents, default page, no search criteria",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "759a33b2-c7af-44d6-b868-ce65ec89a949",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Total pages test', function() {",
													"    pm.expect(responseJson.totalPages).to.equal(2);",
													"})",
													"pm.test('Total elements test', function() {",
													"    pm.expect(responseJson.totalElements).to.equal(10);",
													"})",
													"pm.test('First page test', function() {",
													"    pm.expect(responseJson.first).to.equal(true);",
													"})",
													"pm.test('Page size', function() {",
													"    pm.expect(responseJson.size).to.equal(6);",
													"})",
													"pm.test('Page number of elements', function() {",
													"    pm.expect(responseJson.numberOfElements).to.equal(6);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all documents, page 2, no search criteria",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ba5a9b7-8714-4e89-9f73-336f346a3e5f",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Last page test', function() {",
													"    pm.expect(responseJson.last).to.equal(true);",
													"})",
													"pm.test('First page test', function() {",
													"    pm.expect(responseJson.first).to.equal(false);",
													"})",
													"pm.test('Page number test', function() {",
													"    pm.expect(responseJson.number).to.equal(1);",
													"})",
													"pm.test('Page number of elements', function() {",
													"    pm.expect(responseJson.numberOfElements).to.equal(4);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents?page=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all documents, default page, search by author",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19caf5de-2684-4cfc-9c58-105e8e55898e",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Last page test', function() {",
													"    pm.expect(responseJson.last).to.equal(true);",
													"})",
													"pm.test('First page test', function() {",
													"    pm.expect(responseJson.first).to.equal(true);",
													"})",
													"pm.test('Page number test', function() {",
													"    pm.expect(responseJson.number).to.equal(0);",
													"})",
													"pm.test('Page number of elements', function() {",
													"    pm.expect(responseJson.numberOfElements).to.equal(3);",
													"})",
													"pm.test('Author name test', function() {",
													"    responseJson.content.forEach(element => pm.expect(element.authorLastName).to.equal('King'));",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents?authorName=King",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											],
											"query": [
												{
													"key": "authorName",
													"value": "King"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all documents, default page, search by category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9445fcf4-b0a5-427d-8ca5-a9963885f62f",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Last page test', function() {",
													"    pm.expect(responseJson.last).to.equal(true);",
													"})",
													"pm.test('First page test', function() {",
													"    pm.expect(responseJson.first).to.equal(true);",
													"})",
													"pm.test('Page number test', function() {",
													"    pm.expect(responseJson.number).to.equal(0);",
													"})",
													"pm.test('Page number of elements', function() {",
													"    pm.expect(responseJson.numberOfElements).to.equal(2);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents?category=Thriller",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											],
											"query": [
												{
													"key": "category",
													"value": "Thriller"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a document by id, success, can't be reserved because there are exemplars available",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e66ac1d-fdc6-4f1a-b711-72bf5bd14c89",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 22, ",
													"    \"title\" : \"Conception et programmation orientée objet\",",
													"    \"type\": \"Livre\",",
													"    \"category\": \"Informatique\",",
													"    \"canBeReserved\": false",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.include(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents/22?userId=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"22"
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a document by id, can't be reserved because this user has already reserved it",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7080ad16-3d1d-40ea-bcca-06fb9c49eaec",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 24,",
													"    \"title\": \"Fables intégrale volume 1\",",
													"    \"isbn\": \"979-10-268-1391-0\",",
													"    \"publicationDate\": \"2018-01-19\",",
													"    \"canBeReserved\": false",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.include(resultExpected);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents/24?userId=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"24"
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document by id, unkown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e0c1ec0-e874-4ea7-a643-353ded5ff9bd",
												"exec": [
													"pm.test('Internal server error test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents/999?userId=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"999"
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create document, Forbidden",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "8781a044-364a-4c6e-9668-a175a95469f3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "07c06f99-caf0-4251-8f47-833ca02f3bcf",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"test document\",\n    \"isbn\": \"test-document-isbn\",\n    \"description\": \"test document description\",\n    \"publicationDate\": \"2020-12-03\",\n    \"publisher\" : {\n        \"id\": 3\n    },\n    \"author\": {\n        \"id\" : 7\n    },\n    \"type\": \"Livre\",\n    \"category\": \"Science-Fiction\",\n    \"photo\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/documents",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update document, Forbidden",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2b1a9b13-4bcb-42a1-ad45-6a3d9616629b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "303af5a6-d804-47bf-ac54-a1084f616872",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 22,\n    \"title\": \"Conception et programmation orientée objet\",\n    \"isbn\": \"978-2-212-67500-9\",\n    \"description\": \"Réédition d'un des plus grands classiques de la littérature informatique. Ecrit dans un style d'une clarté absolue, cet ouvrage réussit le tour de force d'être à la fois un livre de réflexion approfondie sur les concepts objet et un ouvrage pratique, apportant des réponses concrètes aux questions que se posent tous les programmeurs et concepteurs de logiciels : comment construire des applications logicielles fiables, performantes, faciles à utiliser et à faire évoluer ? Théorie du typage, gestion de la mémoire, techniques d'héritage, programmation concurrente, objets distribués, persistance et bases de données objet, analyse et conception, réutilisabilité... Tous les aspects du processus de développement logiciel et des technologies objet sont expliqués et discutés dans leurs moindres détails, dans un style brillant, souvent drôle et provocateur.\",\n    \"publicationDate\": \"2017-12-26\",\n    \"publisher\": {\n        \"id\": 12,\n        \"name\": \"Eyrolles\"\n    },\n    \"author\": {\n        \"id\": 21,\n        \"lastName\": \"Meyer\",\n        \"firstName\": \"Bertrand\"\n    },\n    \"type\": \"Livre\",\n    \"category\": \"Informatique\",\n    \"waitingList\": {\n        \"id\": 7,\n        \"size\": 2,\n        \"full\": false,\n        \"documentTitle\": \"Conception et programmation orientée objet\",\n        \"documentId\": 22,\n        \"endDateNextLoanReturn\": null,\n        \"numberUsersInWaitingList\": 0\n    },\n    \"canBeReserved\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/documents/22",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"22"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Exemplar",
							"item": [
								{
									"name": "Get all available exemplars by document id = 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8aafb44-026a-4457-bccc-2cb110d124c8",
												"exec": [
													"pm.test('Status success test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/exemplars?documentId=4",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars"
											],
											"query": [
												{
													"key": "documentId",
													"value": "4"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all available exemplars by document id = 16",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93b93dd2-e4ea-4926-9600-d8f7186aa144",
												"exec": [
													"const resultExpected = [",
													"    {",
													"        \"number\": 1,",
													"        \"libraryName\": \"Grande bibliothèque de Lyon update\"",
													"    }",
													"];",
													"",
													"pm.test('Status success test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test('Results test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/exemplars?documentId=16",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars"
											],
											"query": [
												{
													"key": "documentId",
													"value": "16"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get exemplar id 47",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df47c99a-a458-4246-9d0e-145c7872ca9b",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status success test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Result test', function() {",
													"    console.log('reponse', responseJson);",
													"    pm.expect(responseJson.id).to.equal(38);",
													"    pm.expect(responseJson.document.id).to.equal(16);",
													"    pm.expect(responseJson.document.title).to.equal(\"Brume\");",
													"    pm.expect(responseJson.document.publisher.id).to.equal(10);",
													"    pm.expect(responseJson.document.author.id).to.equal(6);",
													"    pm.expect(responseJson.library.id).to.equal(25);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/exemplars/38",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars",
												"38"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get exemplar id 256 not exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f819a3e2-7173-4cbe-8b6d-d0aada8bbad6",
												"exec": [
													"pm.test('Internal server error test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/exemplars/256",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars",
												"256"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create exemplar, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7a156e0-ecbb-473b-8867-8ae71211fd24",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document\": {\n        \"id\": 16\n    },\n    \"library\": {\n        \"id\": 25,\n        \"name\": \"Grande bibliothèque de Lyon\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/exemplars",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update exemplar, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b230246d-2613-4b1b-8ed0-734ecbf88349",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 38,\n    \"reference\": \"BOOK_9782253151593_1597229931728test\",\n    \"document\": {\n        \"id\": 16,\n        \"title\": \"Brume\",\n        \"isbn\": \"978-2-253-15159-3\",\n        \"description\": \"Imaginez une brume qui s'abat soudainement sur une petite ville, une brume si épaisse que les clients d'un supermarché hésitent à en ressortir. Il n'en faut pas davantage au maître de l'épouvante pour nous plonger dans le cauchemar avec un réalisme hallucinant. Chacune des nouvelles de ce volume possède le même pouvoir ensorcelant. Vous serez terrifié par un petit singe en peluche qui joue des cymbales. Vous redouterez de voir surgir le fantôme d'un... camion. Vous saurez de quoi est capable un naufragé solitaire, lorsque la faim le tenaille et que la drogue décuple son courage. L'art de faire surgir l'effrayant ou le surnaturel au cœur d'un monde rassurant et prosaïque... Les superbes décors du Maine, où vit Stephen King, se révèlent une fois encore peuplés de sortilèges et de malédictions. \",\n        \"publicationDate\": \"2006-06-07\",\n        \"publisher\": {\n            \"id\": 10,\n            \"name\": \"Livre de poche\"\n        },\n        \"author\": {\n            \"id\": 6,\n            \"lastName\": \"King\",\n            \"firstName\": \"Stephen\"\n        },\n        \"type\": \"Livre\",\n        \"category\": \"Science-Fiction\",\n        \"photo\": {\n            \"id\": 2,\n            \"name\": \"978-2-253-15159-3.jpg\",\n            \"extension\": \"jpg\",\n            \"fileToBase64String\": null\n        },\n        \"waitingList\": {\n            \"id\": 3,\n            \"size\": 10,\n            \"full\": false,\n            \"documentTitle\": \"Brume\",\n            \"documentId\": 16,\n            \"endDateNextLoanReturn\": null,\n            \"numberUsersInWaitingList\": 0\n        },\n        \"canBeReserved\": true\n    },\n    \"library\": {\n        \"id\": 25,\n        \"name\": \"Grande bibliothèque de Lyon\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/exemplars/47",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars",
												"47"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Loan",
							"item": [
								{
									"name": "Get all loans, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05e77ed1-842f-44d9-8712-8d0c0bd66654",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all loans by user id, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e86aa78-875a-4ddc-bd02-2a8dbd415dcf",
												"exec": [
													"pm.test('Unauthorized status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json().length).to.equal(2);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/users/2",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"users",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all loans by user id, unknown user, empty array",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5d0d64b-51a8-4b26-b62e-f90bb402dd2b",
												"exec": [
													"pm.test('Internal server error test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.empty;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/users/99",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"users",
												"99"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all ended loans, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2766ab02-ff92-424e-8afd-3315970325c5",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/ended",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"ended"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create loan, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ef3bd44-d68f-409b-952c-48a2767a6e95",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user\": {\n        \"id\": 1\n    },\n    \"exemplar\": {\n        \"id\": 27\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/loans",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update loan, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0de2b1b-d91f-41fe-8355-5eee57fa1ef8",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"id\": 4,\n        \"startDate\": \"2020-07-18\",\n        \"endDate\": \"2020-08-15\",\n        \"renewed\": false,\n        \"user\": {\n            \"id\": 2,\n            \"username\": \"user1\",\n            \"email\": \"user1@email.com\"\n        },\n        \"exemplar\": {\n            \"id\": 30,\n            \"reference\": \"BOOK_9782070612758_1597229880162\",\n            \"library\": {\n                \"id\": 25,\n                \"name\": \"Grande bibliothèque de Lyon\"\n            },\n            \"loanEndDate\": null,\n            \"documentTitle\": \"Le petit prince\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/loans/4",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete loan, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a92bb621-d8c1-4c7b-ba3b-972504105f99",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/4",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "Renew loan, end date before current date, bad request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8e652ff-c042-4bbf-854a-6bbeb2b0ab2e",
												"exec": [
													"pm.test('Bad request status test', function() {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/4/renewal",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"4",
												"renewal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Renew loan, loan has already been renewed, bad request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9fe43a5-a82a-4cd2-b8f5-515635c41d47",
												"exec": [
													"pm.test('Bad request status test', function() {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/5/renewal",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"5",
												"renewal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Return exemplar, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7cb4faf0-ffab-4d44-b780-5662c6267f7d",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/6/return",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"6",
												"return"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "UserWaitingList",
							"item": [
								{
									"name": "Get userWaitingList by user id, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff626327-7ea5-46a8-9152-662f8fad383a",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json().length).to.equal(2);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/waitingLists/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get userWaitingList by user id, unknown entity, empty list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd427df4-9210-47e6-b229-4103e319523c",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.empty;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/waitingLists/1663",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists",
												"1663"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get first userWaitingList by waitingList id, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "496de9b7-3670-4a2c-b8f6-4c7b289aa7c6",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/waitingLists/firstUser/9",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists",
												"firstUser",
												"9"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user to waitingList, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df4a6b1b-7d76-4cf2-b457-e57a833bc949",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user\": {\n        \"id\": 3\n    },\n    \"waitingList\": {\n        \"id\": 9\n    },\n    \"userPosition\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/waitingLists",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user to waitingList, unknonw entity, not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79eaf275-cb41-4cf4-9cc8-901ddcea56c5",
												"exec": [
													"pm.test('Not found status test', function() {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user\": {\n        \"id\": 34545\n    },\n    \"waitingList\": {\n        \"id\": 9\n    },\n    \"userPosition\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/waitingLists",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update userWaitingList, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a42cac79-6408-4d52-b1a7-9de7d298d9d2",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"id\": 1,\n        \"userPosition\": 1,\n        \"mailingDate\": \"2021-12-03\"\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/waitingLists",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9a9a2f2a-7fae-4bea-8ee2-16b5dc136f36",
								"type": "text/javascript",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://localhost:8080/api/auth/signin',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"        \tusername: 'user1',",
									"            password: 'user1'",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"console.log(err ? err : res.json());",
									"    if (err === null) {",
									"        console.log('Saving the token')",
									"        var responseJson = res.json();",
									"        pm.environment.set('accessToken', responseJson.token)",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b6e3e977-ffb5-45c4-8d7c-c9175e40c67f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}