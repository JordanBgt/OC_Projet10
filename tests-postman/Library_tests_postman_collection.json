{
	"info": {
		"_postman_id": "c57a1e45-d12c-4569-8d54-ea0076e545cc",
		"name": "Library tests",
		"description": "Integrations tests for Library application",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Unauthenticated requests",
			"item": [
				{
					"name": "Document",
					"item": [
						{
							"name": "Get all documents default page, no search criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cd3fc32d-bbcb-4f7a-a42d-91619cf1ffcd",
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test('Status test', function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"pm.test('Total pages test', function() {",
											"    pm.expect(responseJson.totalPages).to.equal(2);",
											"})",
											"pm.test('Total elements test', function() {",
											"    pm.expect(responseJson.totalElements).to.equal(9);",
											"})",
											"pm.test('First page test', function() {",
											"    pm.expect(responseJson.first).to.equal(true);",
											"})",
											"pm.test('Page size', function() {",
											"    pm.expect(responseJson.size).to.equal(6);",
											"})",
											"pm.test('Page number of elements', function() {",
											"    pm.expect(responseJson.numberOfElements).to.equal(6);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/documents",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"documents"
									]
								},
								"description": "Try to get all documents where visitor is not connected"
							},
							"response": []
						},
						{
							"name": "Get all documents, page 2, no search criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c82b069-f2d8-4f61-b4aa-f3eb23a3dfda",
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test('Status test', function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"pm.test('Last page test', function() {",
											"    pm.expect(responseJson.last).to.equal(true);",
											"})",
											"pm.test('First page test', function() {",
											"    pm.expect(responseJson.first).to.equal(false);",
											"})",
											"pm.test('Page number test', function() {",
											"    pm.expect(responseJson.number).to.equal(1);",
											"})",
											"pm.test('Page number of elements', function() {",
											"    pm.expect(responseJson.numberOfElements).to.equal(3);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/documents?page=1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"documents"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get document id 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99575fbd-e23e-44ac-b811-92d41ed4f0f9",
										"exec": [
											"const responseJson = pm.response.json();",
											"",
											"pm.test('Status test', function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"pm.test('Document id test', function() {",
											"    pm.expect(responseJson.id).to.equal(4);",
											"})",
											"pm.test('Document title test', function() {",
											"    pm.expect(responseJson.title).to.equal('Le petit prince');",
											"})",
											"pm.test('Document photo exist test', function() {",
											"    pm.expect(responseJson.photo.fileToBase64String).not.eq(undefined);",
											"})",
											"pm.test('Document waitingList id test', function() {",
											"    pm.expect(responseJson.waitingList.id).to.equal(1);",
											"})",
											"pm.test('Document waitingList size test', function() {",
											"    pm.expect(responseJson.waitingList.size).to.equal(16);",
											"})",
											"pm.test('Document can\\'t be reserved test', function() {",
											"    pm.expect(responseJson.canBeReserved).to.equal(false);",
											"})",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/documents/4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"documents",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get document id 75, status 500",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40e7a1f9-1f52-45d2-a346-3a35d0cb5053",
										"exec": [
											"pm.test('Internal server error test', function() {",
											"    pm.expect(pm.response.code).to.equal(500);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/documents/75",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"documents",
										"75"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create document, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46db01ef-5282-486e-a2e8-2dd92f625720",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 123,\n    \"title\": \"title\",\n    \"isbn\" : \"klsqdoiqod54887\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/documents",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"documents"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update document, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c6aa90b-281a-49cb-9e49-b4de1e16cf80",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 123,\n    \"title\": \"title\",\n    \"isbn\" : \"klsqdoiqod54887\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/documents/4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"documents",
										"4"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete document, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4e68b30-5855-4bbf-9080-662967b5a614",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/documents/4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"documents",
										"4"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Author",
					"item": [
						{
							"name": "Get all authors, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0be69715-99d0-4e9f-84f4-ecd8cbfc014e",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/authors",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"authors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get author id 1, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ad6e7326-2976-4855-ad69-86b16dda2f06",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/authors/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"authors",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create author, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "027d9d17-9455-4231-a8bd-65f453c790ba",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 71,\n    \"lastName\": \"lastName\",\n    \"firstName\": \"firstName\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/authors",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"authors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update author, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c31a4963-f738-4961-8719-a67197cb79d1",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 71,\n    \"lastName\": \"lastName\",\n    \"firstName\": \"firstName\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/authors/71",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"authors",
										"71"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete author, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bef6a450-cc22-4d0b-b50c-8d261a2aa013",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/authors/71",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"authors",
										"71"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Signin valid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59de5e63-d78c-4898-9fca-3810909e71bb",
										"exec": [
											"const responseJson = pm.response.json();",
											"const resultExpected = {",
											"    \"id\" : 2,",
											"    \"username\": \"user1\",",
											"    \"email\": \"user1@email.com\",",
											"    \"roles\": [\"ROLE_USER\"]",
											"};",
											"",
											"pm.test('Status test', function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"pm.test('User informations test', function() {",
											"    pm.expect(responseJson).to.deep.include(resultExpected);",
											"})",
											"pm.test('Token test', function() {",
											"    pm.expect(responseJson.token).not.eq(undefined);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"user1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Signin invalid body",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2fbd644-12ff-485a-b9f2-b7579ad018ef",
										"exec": [
											"pm.test('Unauthorized test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Signin invalid credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8c24996-9982-4402-aa3b-4d9c974e09a6",
										"exec": [
											"pm.test('Unauthorized test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"user2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signin",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signin"
									]
								}
							},
							"response": []
						},
						{
							"name": "Signup valid request",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e8c5ccc8-3235-4b4f-9c32-100361b21e01",
										"exec": [
											"pm.test('Status success test', function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"username\",\n    \"password\": \"password\",\n    \"email\": \"email@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Signup username exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "711f4ea2-0809-4bb9-9e77-3130830bb97f",
										"exec": [
											"pm.test('Status error test', function() {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"})",
											"pm.test('Message error test', function() {",
											"    pm.expect(pm.response.json().message).to.equal('Erreur : le pseudo est déjà utilisé !');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"user1\",\n    \"password\": \"password\",\n    \"email\": \"asdqsdq@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Signup email exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83304f7c-5d8d-4b77-83ef-7142a7b4df5b",
										"exec": [
											"pm.test('Status error test', function() {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"})",
											"pm.test('Message error test', function() {",
											"    pm.expect(pm.response.json().message).to.equal('Erreur : l\\'email est déjà utilisé !');",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"dfsdfsdf\",\n    \"password\": \"password\",\n    \"email\": \"user2@mail.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/auth/signup",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"auth",
										"signup"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Exemplar",
					"item": [
						{
							"name": "Get all available exemplars by document id = 4",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a6b6290-412b-4119-9534-7728b83592d6",
										"exec": [
											"pm.test('Status success test', function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"const resultsExpected = [",
											"    {",
											"        \"number\": 2,",
											"        \"libraryName\": \"Bibliothèque Stephen King\"",
											"    },",
											"    {",
											"        \"number\": 4,",
											"        \"libraryName\": \"Grande bibliothèque de Lyon\"",
											"    },",
											"    {",
											"        \"number\": 2,",
											"        \"libraryName\": \"Bibliothèque Voltaire\"",
											"    }",
											"]",
											"",
											"pm.test('Results test', function() {",
											"    pm.expect(pm.response.json()).to.deep.equal(resultsExpected);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/exemplars?documentId=4",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"exemplars"
									],
									"query": [
										{
											"key": "documentId",
											"value": "4"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all available exemplars by document id = 16",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6fc1defb-f79d-47a2-bce0-b865a29a6bb0",
										"exec": [
											"pm.test('Status success test', function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"",
											"pm.test('Results test', function() {",
											"    pm.expect(pm.response.json()).to.deep.equal([]);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/exemplars?documentId=0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"exemplars"
									],
									"query": [
										{
											"key": "documentId",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exemplar id 47",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4d8244d-ff4c-4284-b319-c911b6e2fcd1",
										"exec": [
											"const resultExpected = {",
											"    \"id\": 38,",
											"    \"reference\": \"BOOK_9782253151593_1597229931728\",",
											"    \"document\": {",
											"        \"id\": 16,",
											"        \"title\": \"Brume\",",
											"        \"isbn\": \"978-2-253-15159-3\",",
											"        \"description\": \"Imaginez une brume qui s'abat soudainement sur une petite ville, une brume si épaisse que les clients d'un supermarché hésitent à en ressortir. Il n'en faut pas davantage au maître de l'épouvante pour nous plonger dans le cauchemar avec un réalisme hallucinant. Chacune des nouvelles de ce volume possède le même pouvoir ensorcelant. Vous serez terrifié par un petit singe en peluche qui joue des cymbales. Vous redouterez de voir surgir le fantôme d'un... camion. Vous saurez de quoi est capable un naufragé solitaire, lorsque la faim le tenaille et que la drogue décuple son courage. L'art de faire surgir l'effrayant ou le surnaturel au cœur d'un monde rassurant et prosaïque... Les superbes décors du Maine, où vit Stephen King, se révèlent une fois encore peuplés de sortilèges et de malédictions. \",",
											"        \"publicationDate\": \"2006-06-07\",",
											"        \"publisher\": {",
											"            \"id\": 10,",
											"            \"name\": \"Livre de poche\"",
											"        },",
											"        \"author\": {",
											"            \"id\": 6,",
											"            \"lastName\": \"King\",",
											"            \"firstName\": \"Stephen\"",
											"        },",
											"        \"type\": \"Livre\",",
											"        \"category\": \"Science-Fiction\",",
											"        \"photo\": {",
											"            \"id\": 2,",
											"            \"name\": \"978-2-253-15159-3.jpg\",",
											"            \"extension\": \"jpg\",",
											"            \"fileToBase64String\": null",
											"        },",
											"        \"waitingList\": {",
											"            \"id\": 3,",
											"            \"size\": 2,",
											"            \"full\": false,",
											"            \"documentTitle\": \"Brume\",",
											"            \"documentId\": 16,",
											"            \"endDateNextLoanReturn\": null,",
											"            \"numberUsersInWaitingList\": 0",
											"        },",
											"        \"canBeReserved\": true",
											"    },",
											"    \"library\": {",
											"        \"id\": 25,",
											"        \"name\": \"Grande bibliothèque de Lyon\"",
											"    }",
											"}",
											"",
											"pm.test('Status success test', function() {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"})",
											"pm.test('Result test', function() {",
											"    pm.expect(pm.response.json()).to.deep.equal(resultExpected);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/exemplars/38",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"exemplars",
										"38"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get exemplar id 256 not exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36ac7272-24d1-4fc9-a0af-a7d99ba18944",
										"exec": [
											"pm.test('Internal server error test', function() {",
											"    pm.expect(pm.response.code).to.equal(500);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/exemplars/256",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"exemplars",
										"256"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create exemplar, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a53535d9-50d8-49fe-acb7-dfe9937e9628",
										"exec": [
											"pm.test('Unauthorizes status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 122,\n    \"reference\": \"BOOK_9dfsfs782253151593_1597229931728\",\n    \"document\": {\n        \"id\": 16\n    },\n    \"library\": {\n        \"id\": 25,\n        \"name\": \"Grande bibliothèque de Lyon\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/exemplars",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"exemplars"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update exemplar, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfa4b9a5-7166-4442-8526-3ce4bd7d7e66",
										"exec": [
											"pm.test('Unauthorizes status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 122,\n    \"reference\": \"BOOK_9dfsfs782253151593_1597229931728\",\n    \"document\": {\n        \"id\": 16\n    },\n    \"library\": {\n        \"id\": 25,\n        \"name\": \"Grande bibliothèque de Lyon\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/exemplars/122",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"exemplars",
										"122"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete exemplar, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc494fc3-d9f2-4b94-8b09-94718b617440",
										"exec": [
											"pm.test('Unauthorizes status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/exemplars/122",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"exemplars",
										"122"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Library",
					"item": [
						{
							"name": "Get all libraries, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "619dcebe-591d-4f54-a93e-c06565f8a30f",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/libraries",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"libraries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get library by id, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "26ab79a9-ba32-4b06-95f7-c93d82fc039d",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/libraries/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"libraries",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create library, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8329ebfc-ea51-46c4-8a63-e16b24647008",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 452,\n    \"name\": \"library name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/libraries",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"libraries"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update library, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a448116d-ff8e-4614-a302-948a623f0903",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 452,\n    \"name\": \"library name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/libraries/452",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"libraries",
										"452"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete library, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2b0454f-66a1-499a-ae59-d4df86fe7b13",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/libraries/452",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"libraries",
										"452"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Loan",
					"item": [
						{
							"name": "Get all loans, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5d77cde-2ec4-40c2-93ac-50dc072da26d",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/loans",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"loans"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all loans by user id, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9fd1b0f8-f0f1-4ed0-a163-43f4635e90cf",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/loans/users/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"loans",
										"users",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all ended loans, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f27a7d81-b4c6-4ef5-8366-ef657d51111e",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/loans/ended",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"loans",
										"ended"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create loan, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77f6eb22-0b65-4918-b05f-d328598800c0",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"startDate\": \"2020-12-02\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/loans",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"loans"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update loan, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a54dc20c-aeec-4cc7-b3b3-7fc0c94274f2",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"startDate\": \"2020-12-02\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/loans/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"loans",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete loan, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0aa280b4-af57-4b6a-959a-0c81a3e1e717",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/loans/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"loans",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Renew loan, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b4b958f-2c99-4a09-a163-4f16cd7c7953",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/loans/1/renewal",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"loans",
										"1",
										"renewal"
									]
								}
							},
							"response": []
						},
						{
							"name": "Return exemplar, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bccb062d-c743-451c-b008-fcfbe75d76cb",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/loans/1/return",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"loans",
										"1",
										"return"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Publisher",
					"item": [
						{
							"name": "Get all publishers, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e64f5435-b85a-4adb-8ff2-21890f49998d",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/publishers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"publishers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get publisher by id, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34eebc99-dd48-4c7e-a5b5-278b42dad63e",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/publishers/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"publishers",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create publisher, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d423fcf-c868-48e5-b368-33b2ac1235d2",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 12,\n    \"name\": \"publisher name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/publishers",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"publishers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update publisher, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "207e03c5-59c1-4ea9-a6f9-dbc96c1ed2dd",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 12,\n    \"name\": \"publisher name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/publishers/12",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"publishers",
										"12"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete publisher, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fce21457-ece5-4ad7-b623-3d1d05e6dc61",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/publishers/12",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"publishers",
										"12"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UserWaitingList",
					"item": [
						{
							"name": "Get userWaitingList by user id, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c31e7d3a-065c-4e21-83c6-182f6630d5c9",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/waitingLists/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"waitingLists",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get first userWaitingList by waitingList id, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "605a3e30-ae7e-45ba-98e1-793f3c8f0d48",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/waitingLists/firstUser/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"waitingLists",
										"firstUser",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add user to waitingList, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4317bd7-b98e-44ee-8add-b62c7230e277",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/waitingLists",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"waitingLists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update userWaitingList, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba868db2-167c-4097-9cbf-c45b03466dd8",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/api/waitingLists",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"waitingLists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete userWaitingList, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "912ec8c9-ed23-4dbd-8af1-4f6ce24834de",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/waitingLists/1",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"waitingLists",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete all expired userWaitingList, unauthorized",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ffd5ad3e-d43c-4c71-80e0-9669aab7ecbd",
										"exec": [
											"pm.test('Unauthorized status test', function() {",
											"    pm.expect(pm.response.code).to.equal(401);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:8080/api/waitingLists/expired",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"waitingLists",
										"expired"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "it tests all controller methods with unauthenticated requests",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8950d20d-2005-47bb-b5f4-dda973085f4e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5d84dcfe-d8af-496c-9958-619fa5c8f67b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Authenticated requests",
			"item": [
				{
					"name": "Role admin",
					"item": [
						{
							"name": "Library",
							"item": [
								{
									"name": "Get all libraries, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83c26fa6-4f09-4758-805d-e2a345f0f95f",
												"exec": [
													"const results = [",
													"    {",
													"        \"id\": 1,",
													"        \"name\": \"Bibliothèque Stephen King\"",
													"    },",
													"    {",
													"        \"id\": 25,",
													"        \"name\": \"Grande bibliothèque de Lyon\"",
													"    },",
													"    {",
													"        \"id\": 26,",
													"        \"name\": \"Bibliothèque Voltaire\"",
													"    }",
													"];",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Results test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(results);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/libraries",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get library id 25, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca938890-666a-43d3-b55c-66b20990fe1e",
												"exec": [
													"const result = {",
													"        \"id\": 25,",
													"        \"name\": \"Grande bibliothèque de Lyon\"",
													"    };",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Results test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(result);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/libraries/25",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries",
												"25"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get library id 52, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da9822f5-7433-4f1d-ae9a-1b5040b33327",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/libraries/52",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries",
												"52"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create library, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec937b1e-4d6b-4c83-bdcd-bb578b667258",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()['name']).to.equal('Biblio test');",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Biblio test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/libraries",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create library, invalid body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1be0f8c-0821-4909-b616-76b49339bdbb",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"namesq\": \"Biblio test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/libraries",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update library, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "968e2987-d942-4748-8a2c-b13b69bd5471",
												"exec": [
													"const result = {",
													"    \"id\": 25,",
													"    \"name\": \"Grande bibliothèque de Lyon update\"",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(result);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 25,\n    \"name\": \"Grande bibliothèque de Lyon update\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/libraries/25",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries",
												"25"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update library, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a4efefa-ef41-4058-b158-7f2760a345cd",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 52,\n    \"name\": \"test update\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/libraries/52",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries",
												"52"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Author",
							"item": [
								{
									"name": "Get all authors, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7cbeefe4-aa7f-443b-90dd-20b5ae8de5ae",
												"exec": [
													"const results = [",
													"    {",
													"        \"id\": 2,",
													"        \"lastName\": \"De Saint-Exupéry\",",
													"        \"firstName\": \"Antoine\"",
													"    },",
													"    {",
													"        \"id\": 6,",
													"        \"lastName\": \"King\",",
													"        \"firstName\": \"Stephen\"",
													"    },",
													"    {",
													"        \"id\": 7,",
													"        \"lastName\": \"Coben\",",
													"        \"firstName\": \"Harlan\"",
													"    },",
													"    {",
													"        \"id\": 8,",
													"        \"lastName\": \"Lemire\",",
													"        \"firstName\": \"Jeff\"",
													"    },",
													"    {",
													"        \"id\": 9,",
													"        \"lastName\": \"Willingham\",",
													"        \"firstName\": \"Bill\"",
													"    },",
													"    {",
													"        \"id\": 21,",
													"        \"lastName\": \"Meyer\",",
													"        \"firstName\": \"Bertrand\"",
													"    }",
													"];",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Results test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(results);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/authors",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get author id 21, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c86dfff4-b1dc-4afe-a1d9-cf074e20ef40",
												"exec": [
													"const result = {",
													"        \"id\": 21,",
													"        \"lastName\": \"Meyer\",",
													"        \"firstName\": \"Bertrand\"",
													"    };",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Results test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(result);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/authors/21",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors",
												"21"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get author id 71, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1efd512a-bc66-4cf0-ba9f-0e0f34b29a78",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/authors/71",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors",
												"71"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create author, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23a80561-4c37-4f8b-bb53-15aa91d0676f",
												"exec": [
													"const responseJson = pm.response.json();",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200)",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(responseJson.lastName).to.equal('test name');",
													"    pm.expect(responseJson.firstName).to.equal('test firstname');",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"lastName\": \"test name\",\n    \"firstName\": \"test firstname\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/authors",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create author, invalid body, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a1f9675-5e87-4f4c-bd44-f4f8597c04b2",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500)",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"test name\",\n    \"firstName\": \"test firstname\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/authors",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update author, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f1007b1-bc9a-4e94-a1ac-d03ecd730c27",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 21,",
													"    \"lastName\": \"Test\",",
													"    \"firstName\": \"test\"",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200)",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(resultExpected);",
													"})",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 21,\n    \"lastName\": \"Test\",\n    \"firstName\": \"test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/authors/21",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors",
												"21"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update author, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "110296da-d437-46ae-8c5a-a518c96f0d4f",
												"exec": [
													"pm.test('Internal server status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500)",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 997,\n    \"lastName\": \"Test\",\n    \"firstName\": \"test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/authors/997",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors",
												"997"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Document",
							"item": [
								{
									"name": "Get all documents, default page, no search criteria",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "339a0245-fd89-47bf-aa13-197a4a7062d3",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Total pages test', function() {",
													"    pm.expect(responseJson.totalPages).to.equal(2);",
													"})",
													"pm.test('Total elements test', function() {",
													"    pm.expect(responseJson.totalElements).to.equal(9);",
													"})",
													"pm.test('First page test', function() {",
													"    pm.expect(responseJson.first).to.equal(true);",
													"})",
													"pm.test('Page size', function() {",
													"    pm.expect(responseJson.size).to.equal(6);",
													"})",
													"pm.test('Page number of elements', function() {",
													"    pm.expect(responseJson.numberOfElements).to.equal(6);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all documents, page 2, no search criteria",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98329583-5bf8-4c41-b62f-fc15d9c1b486",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Last page test', function() {",
													"    pm.expect(responseJson.last).to.equal(true);",
													"})",
													"pm.test('First page test', function() {",
													"    pm.expect(responseJson.first).to.equal(false);",
													"})",
													"pm.test('Page number test', function() {",
													"    pm.expect(responseJson.number).to.equal(1);",
													"})",
													"pm.test('Page number of elements', function() {",
													"    pm.expect(responseJson.numberOfElements).to.equal(3);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents?page=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all documents, default page, search by author",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37878b9f-32cc-4c91-9bca-41905865e130",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Last page test', function() {",
													"    pm.expect(responseJson.last).to.equal(true);",
													"})",
													"pm.test('First page test', function() {",
													"    pm.expect(responseJson.first).to.equal(true);",
													"})",
													"pm.test('Page number test', function() {",
													"    pm.expect(responseJson.number).to.equal(0);",
													"})",
													"pm.test('Page number of elements', function() {",
													"    pm.expect(responseJson.numberOfElements).to.equal(3);",
													"})",
													"pm.test('Author name test', function() {",
													"    responseJson.content.forEach(element => pm.expect(element.authorLastName).to.equal('King'));",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents?authorName=King",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											],
											"query": [
												{
													"key": "authorName",
													"value": "King"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all documents, default page, search by category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be933dfc-b049-45c6-a97d-eb1289e4de8a",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Last page test', function() {",
													"    pm.expect(responseJson.last).to.equal(true);",
													"})",
													"pm.test('First page test', function() {",
													"    pm.expect(responseJson.first).to.equal(true);",
													"})",
													"pm.test('Page number test', function() {",
													"    pm.expect(responseJson.number).to.equal(0);",
													"})",
													"pm.test('Page number of elements', function() {",
													"    pm.expect(responseJson.numberOfElements).to.equal(2);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents?category=Thriller",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											],
											"query": [
												{
													"key": "category",
													"value": "Thriller"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a document by id, success, can't be reserved because there are exemplars available",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6461c69d-2e91-4774-b1df-3ff71d78ce69",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 22, ",
													"    \"title\" : \"Conception et programmation orientée objet\",",
													"    \"publicationDate\": \"2017-10-26\",",
													"    \"type\": \"Livre\",",
													"    \"category\": \"Informatique\",",
													"    \"canBeReserved\": false",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.include(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents/22?userId=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"22"
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a document by id, can be reserved because no exemplar available and this user has neither borrowed nor reserved the document",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f97985c-798a-4d92-abf5-cdffd223129b",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 16,",
													"    \"title\": \"Brume\",",
													"    \"isbn\": \"978-2-253-15159-3\",",
													"    \"publicationDate\": \"2006-06-07\",",
													"    \"type\": \"Livre\",",
													"    \"category\": \"Science-Fiction\",",
													"    \"waitingList\": {",
													"        \"id\": 3,",
													"        \"size\": 2,",
													"        \"full\": false,",
													"        \"documentTitle\": \"Brume\",",
													"        \"documentId\": 16,",
													"        \"endDateNextLoanReturn\": \"2020-09-07\",",
													"        \"numberUsersInWaitingList\": 0",
													"    },",
													"    \"canBeReserved\": true",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.include(resultExpected);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents/16?userId=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"16"
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a document by id, can't be reserved because this user has already reserved it",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0770007-05f2-4742-994f-c1a1d6a056ec",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 24,",
													"    \"title\": \"Fables intégrale volume 1\",",
													"    \"isbn\": \"979-10-268-1391-0\",",
													"    \"publicationDate\": \"2018-01-19\",",
													"    \"waitingList\": {",
													"        \"id\": 9,",
													"        \"size\": 4,",
													"        \"full\": false,",
													"        \"documentTitle\": \"Fables intégrale volume 1\",",
													"        \"documentId\": 24,",
													"        \"endDateNextLoanReturn\": \"2020-10-15\",",
													"        \"numberUsersInWaitingList\": 1",
													"    },",
													"    \"canBeReserved\": false",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.include(resultExpected);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents/24?userId=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"24"
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document by id, unkown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "996584ec-312f-410e-9ae5-355bc0934ea3",
												"exec": [
													"pm.test('Internal server error test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents/999?userId=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"999"
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create document, success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9ec6ce57-2fdc-4425-92b1-76ddbe3fd948",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "609679ef-82b9-4896-a6b3-20371b6fb447",
												"exec": [
													"const resultExpected = {",
													"    \"title\": \"test document\",",
													"    \"isbn\": \"test-document-isbn\",",
													"    \"description\": \"test document description\",",
													"    \"publicationDate\": \"2020-12-03\",",
													"    \"type\": \"Livre\",",
													"    \"category\": \"Science-Fiction\",",
													"    \"photo\": null",
													"};",
													"",
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(responseJson).to.deep.include(resultExpected);",
													"});",
													"pm.test('Author test', function() {",
													"    pm.expect(responseJson.author.id).to.equal(7);",
													"});",
													"pm.test('Publisher test', function() {",
													"    pm.expect(responseJson.publisher.id).to.equal(3);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"test document\",\n    \"isbn\": \"test-document-isbn\",\n    \"description\": \"test document description\",\n    \"publicationDate\": \"2020-12-03\",\n    \"publisher\" : {\n        \"id\": 3\n    },\n    \"author\": {\n        \"id\" : 7\n    },\n    \"type\": \"Livre\",\n    \"category\": \"Science-Fiction\",\n    \"photo\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/documents",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create document, invalid body, internal server error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dcb675f3-90f2-4a2e-8c6a-114bcfc2614b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "56e541b3-bec0-4907-b205-dbaa8f121c53",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"test document\",\n    \"isbn\": \"test-document-isbn\",\n    \"description\": \"test document description\",\n    \"publicationDate\": \"2020-12-03\",\n    \"publisher\" : {\n        \"id\": 345\n    },\n    \"author\": {\n        \"id\" : 79996\n    },\n    \"type\": \"Livre\",\n    \"category\": \"Science-Fiction\",\n    \"photo\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/documents",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update document, success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1ad0e226-49c2-439e-92f4-881361637cc1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1f1a76a5-4308-4e24-9d0a-f1cce26b6ca1",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 22, ",
													"    \"publicationDate\": \"2017-12-26\"",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.include(resultExpected);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 22,\n    \"title\": \"Conception et programmation orientée objet\",\n    \"isbn\": \"978-2-212-67500-9\",\n    \"description\": \"Réédition d'un des plus grands classiques de la littérature informatique. Ecrit dans un style d'une clarté absolue, cet ouvrage réussit le tour de force d'être à la fois un livre de réflexion approfondie sur les concepts objet et un ouvrage pratique, apportant des réponses concrètes aux questions que se posent tous les programmeurs et concepteurs de logiciels : comment construire des applications logicielles fiables, performantes, faciles à utiliser et à faire évoluer ? Théorie du typage, gestion de la mémoire, techniques d'héritage, programmation concurrente, objets distribués, persistance et bases de données objet, analyse et conception, réutilisabilité... Tous les aspects du processus de développement logiciel et des technologies objet sont expliqués et discutés dans leurs moindres détails, dans un style brillant, souvent drôle et provocateur.\",\n    \"publicationDate\": \"2017-12-26\",\n    \"publisher\": {\n        \"id\": 12,\n        \"name\": \"Eyrolles\"\n    },\n    \"author\": {\n        \"id\": 21,\n        \"lastName\": \"Meyer\",\n        \"firstName\": \"Bertrand\"\n    },\n    \"type\": \"Livre\",\n    \"category\": \"Informatique\",\n    \"waitingList\": {\n        \"id\": 7,\n        \"size\": 2,\n        \"full\": false,\n        \"documentTitle\": \"Conception et programmation orientée objet\",\n        \"documentId\": 22,\n        \"endDateNextLoanReturn\": null,\n        \"numberUsersInWaitingList\": 0\n    },\n    \"canBeReserved\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/documents/22",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"22"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update document, unknown entity, internal server error",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2d4ad9a3-6831-40b7-a236-b82686baecce",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "31be2ff2-7d54-48ea-8c0b-c28047fe7f10",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 2222,\n    \"title\": \"Conception et programmation orientée objet\",\n    \"isbn\": \"978-2-212-67500-9\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/documents/2222",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"2222"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Exemplar",
							"item": [
								{
									"name": "Get all available exemplars by document id = 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56bc18a0-5d5d-4946-b17f-9f037e13b11b",
												"exec": [
													"pm.test('Status success test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/exemplars?documentId=4",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars"
											],
											"query": [
												{
													"key": "documentId",
													"value": "4"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all available exemplars by document id = 16",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e963bfd-f912-4610-aa6c-c86a81522db9",
												"exec": [
													"pm.test('Status success test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test('Results test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal([]);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/exemplars?documentId=16",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars"
											],
											"query": [
												{
													"key": "documentId",
													"value": "16"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get exemplar id 47",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7429aa9-03a2-45d8-b941-1da17f8ef5ff",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status success test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Result test', function() {",
													"    console.log('reponse', responseJson);",
													"    pm.expect(responseJson.id).to.equal(38);",
													"    pm.expect(responseJson.document.id).to.equal(16);",
													"    pm.expect(responseJson.document.title).to.equal(\"Brume\");",
													"    pm.expect(responseJson.document.publisher.id).to.equal(10);",
													"    pm.expect(responseJson.document.author.id).to.equal(6);",
													"    pm.expect(responseJson.library.id).to.equal(25);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/exemplars/38",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars",
												"38"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get exemplar id 256 not exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f44f0169-bb71-4d50-855d-1cf50977fe04",
												"exec": [
													"pm.test('Internal server error test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/exemplars/256",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars",
												"256"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create exemplar, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "675230eb-79c5-45a5-a0d1-29ee231ef21d",
												"exec": [
													"const resultExpected = {",
													"    \"document\": {",
													"        \"id\": 16",
													"    },",
													"    \"library\": {",
													"        \"id\": 25",
													"    }",
													"};",
													"",
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(responseJson.document).to.include(resultExpected.document);",
													"    pm.expect(responseJson.library).to.include(resultExpected.library);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document\": {\n        \"id\": 16\n    },\n    \"library\": {\n        \"id\": 25,\n        \"name\": \"Grande bibliothèque de Lyon\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/exemplars",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create exemplar, invalid body, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44dfde20-232a-4e07-8fdb-cd25c010996b",
												"exec": [
													"pm.test('Internal server error', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document\": {\n        \"id\": 1679\n    },\n    \"library\": {\n        \"id\": 25\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/exemplars",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update exemplar, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14103eec-501b-4838-b9a5-c33eb9e062d5",
												"exec": [
													"const responseJson = pm.response.json();",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(responseJson.id).to.equal(38);",
													"    pm.expect(responseJson.reference).to.equal(\"BOOK_9782253151593_1597229931728test\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 38,\n    \"reference\": \"BOOK_9782253151593_1597229931728test\",\n    \"document\": {\n        \"id\": 16,\n        \"title\": \"Brume\",\n        \"isbn\": \"978-2-253-15159-3\",\n        \"description\": \"Imaginez une brume qui s'abat soudainement sur une petite ville, une brume si épaisse que les clients d'un supermarché hésitent à en ressortir. Il n'en faut pas davantage au maître de l'épouvante pour nous plonger dans le cauchemar avec un réalisme hallucinant. Chacune des nouvelles de ce volume possède le même pouvoir ensorcelant. Vous serez terrifié par un petit singe en peluche qui joue des cymbales. Vous redouterez de voir surgir le fantôme d'un... camion. Vous saurez de quoi est capable un naufragé solitaire, lorsque la faim le tenaille et que la drogue décuple son courage. L'art de faire surgir l'effrayant ou le surnaturel au cœur d'un monde rassurant et prosaïque... Les superbes décors du Maine, où vit Stephen King, se révèlent une fois encore peuplés de sortilèges et de malédictions. \",\n        \"publicationDate\": \"2006-06-07\",\n        \"publisher\": {\n            \"id\": 10,\n            \"name\": \"Livre de poche\"\n        },\n        \"author\": {\n            \"id\": 6,\n            \"lastName\": \"King\",\n            \"firstName\": \"Stephen\"\n        },\n        \"type\": \"Livre\",\n        \"category\": \"Science-Fiction\",\n        \"photo\": {\n            \"id\": 2,\n            \"name\": \"978-2-253-15159-3.jpg\",\n            \"extension\": \"jpg\",\n            \"fileToBase64String\": null\n        },\n        \"waitingList\": {\n            \"id\": 3,\n            \"size\": 10,\n            \"full\": false,\n            \"documentTitle\": \"Brume\",\n            \"documentId\": 16,\n            \"endDateNextLoanReturn\": null,\n            \"numberUsersInWaitingList\": 0\n        },\n        \"canBeReserved\": true\n    },\n    \"library\": {\n        \"id\": 25,\n        \"name\": \"Grande bibliothèque de Lyon\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/exemplars/47",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars",
												"47"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update exemplar, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d174d53-b77e-4009-837b-5d6e2ca0e22b",
												"exec": [
													"pm.test('Internal server error test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 474,\n    \"reference\": \"BOOK_9782253151593_1597229931728test\",\n    \"document\": {\n        \"id\": 16,\n        \"title\": \"Brume\",\n        \"isbn\": \"978-2-253-15159-3\",\n        \"description\": \"Imaginez une brume qui s'abat soudainement sur une petite ville, une brume si épaisse que les clients d'un supermarché hésitent à en ressortir. Il n'en faut pas davantage au maître de l'épouvante pour nous plonger dans le cauchemar avec un réalisme hallucinant. Chacune des nouvelles de ce volume possède le même pouvoir ensorcelant. Vous serez terrifié par un petit singe en peluche qui joue des cymbales. Vous redouterez de voir surgir le fantôme d'un... camion. Vous saurez de quoi est capable un naufragé solitaire, lorsque la faim le tenaille et que la drogue décuple son courage. L'art de faire surgir l'effrayant ou le surnaturel au cœur d'un monde rassurant et prosaïque... Les superbes décors du Maine, où vit Stephen King, se révèlent une fois encore peuplés de sortilèges et de malédictions. \",\n        \"publicationDate\": \"2006-06-07\",\n        \"publisher\": {\n            \"id\": 10,\n            \"name\": \"Livre de poche\"\n        },\n        \"author\": {\n            \"id\": 6,\n            \"lastName\": \"King\",\n            \"firstName\": \"Stephen\"\n        },\n        \"type\": \"Livre\",\n        \"category\": \"Science-Fiction\",\n        \"photo\": {\n            \"id\": 2,\n            \"name\": \"978-2-253-15159-3.jpg\",\n            \"extension\": \"jpg\",\n            \"fileToBase64String\": null\n        },\n        \"waitingList\": {\n            \"id\": 3,\n            \"size\": 10,\n            \"full\": false,\n            \"documentTitle\": \"Brume\",\n            \"documentId\": 16,\n            \"endDateNextLoanReturn\": null,\n            \"numberUsersInWaitingList\": 0\n        },\n        \"canBeReserved\": true\n    },\n    \"library\": {\n        \"id\": 25,\n        \"name\": \"Grande bibliothèque de Lyon\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/exemplars/474",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars",
												"474"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Loan",
							"item": [
								{
									"name": "Get all loans",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c96ec51d-914c-4f0f-a370-298d3996a339",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json().length).to.equal(6);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all loans by user id, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d6039b2-7de3-4842-a0ae-f6e714d59c3f",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json().length).to.equal(3);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/users/2",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"users",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all loans by user id, unknown user, empty array",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9d09a5e-01a2-4c98-91dc-4d27bb611e70",
												"exec": [
													"pm.test('Internal server error test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.empty;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/users/99",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"users",
												"99"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all ended loans, Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a2cc944-6a8c-4da2-90c0-6c56aebd9808",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    console.log(pm.response.json().size);",
													"    pm.expect(pm.response.json().length).to.gte(2);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/ended",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"ended"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create loan, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3b122d7-4deb-4e85-98e5-af44ac4be7a2",
												"exec": [
													"const resultExpected = {",
													"    \"renewed\": false,",
													"    \"user\": {",
													"        \"id\": 1,",
													"        \"username\": \"admin\",",
													"        \"email\": \"lesbiblios@gmail.com\"",
													"    },",
													"    \"exemplar\": {",
													"        \"id\": 27,",
													"        \"reference\": \"BOOK_9782070612758_1597229871157\",",
													"        \"library\": {",
													"            \"id\": 1,",
													"            \"name\": \"Bibliothèque Stephen King\"",
													"        },",
													"        \"loanEndDate\": null,",
													"        \"documentTitle\": \"Le petit prince\"",
													"    }",
													"};",
													"",
													"pm.test('Unauthorized status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.include(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user\": {\n        \"id\": 1\n    },\n    \"exemplar\": {\n        \"id\": 27\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/loans",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create loan, invalid body, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "388ef7f8-8586-422a-a076-ded6a817941d",
												"exec": [
													"pm.test('Internal server error test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"startDate\": \"2020-03-12\",\n    \"user\": {\n        \"id\": 1894\n    },\n    \"exemplar\": {\n        \"id\": 27774\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/loans",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update loan, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a320004c-65d3-4967-b0ec-f9e90e4daa77",
												"exec": [
													"const responseJson = pm.response.json();",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(responseJson.id).to.equal(4);",
													"    pm.expect(responseJson.startDate).to.equal(\"2020-07-18\");",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"id\": 4,\n        \"startDate\": \"2020-07-18\",\n        \"endDate\": \"2020-08-15\",\n        \"renewed\": false,\n        \"user\": {\n            \"id\": 2,\n            \"username\": \"user1\",\n            \"email\": \"user1@email.com\"\n        },\n        \"exemplar\": {\n            \"id\": 30,\n            \"reference\": \"BOOK_9782070612758_1597229880162\",\n            \"library\": {\n                \"id\": 25,\n                \"name\": \"Grande bibliothèque de Lyon\"\n            },\n            \"loanEndDate\": null,\n            \"documentTitle\": \"Le petit prince\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/loans/4",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update loan, unkonwn entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b850953-580b-41a6-b659-5140333864ef",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"id\": 4458,\n        \"startDate\": \"2020-07-18\",\n        \"endDate\": \"2020-08-15\",\n        \"renewed\": false,\n        \"user\": {\n            \"id\": 2,\n            \"username\": \"user1\",\n            \"email\": \"user1@email.com\"\n        },\n        \"exemplar\": {\n            \"id\": 30,\n            \"reference\": \"BOOK_9782070612758_1597229880162\",\n            \"library\": {\n                \"id\": 25,\n                \"name\": \"Grande bibliothèque de Lyon\"\n            },\n            \"loanEndDate\": null,\n            \"documentTitle\": \"Le petit prince\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/loans/4458",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"4458"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete loan, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39502192-948e-4ea7-a0ed-3a897ebaa445",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/4",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete loan, unknown entity, not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9933afc7-3322-40c4-aa25-8d76ad7dcad3",
												"exec": [
													"pm.test('Not found status test', function() {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/45236",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"45236"
											]
										}
									},
									"response": []
								},
								{
									"name": "Renew loan, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc01745d-2044-4bb2-971f-f3b0340b8aec",
												"exec": [
													"pm.test('Bad request status test', function() {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9e70434d-c38e-460f-965c-cfddc3a26099",
												"exec": [
													"const req = {",
													"    url: 'http://localhost:8080/api/loans',",
													"    method: 'POST',",
													"    header: [",
													"        {",
													"            key: 'Content-Type',",
													"            value: 'application/json'",
													"        },",
													"        {",
													"            key: 'Authorization',",
													"            value: 'Bearer ' + pm.environment.get('accessToken')",
													"        }",
													"    ],",
													"    body: {",
													"    mode: 'application/json',",
													"    raw: JSON.stringify(",
													"        {",
													"            user: {",
													"                id: 1",
													"            },",
													"            exemplar: {",
													"                id: 41",
													"            }",
													"        })",
													"  }",
													"};",
													"pm.sendRequest(req, function (err, res) {",
													"console.log(err ? err : res.json());",
													"    if (err === null) {",
													"        var responseJson = res.json();",
													"        console.log('save loanId ' + responseJson.id);",
													"        pm.environment.set('loanId', responseJson.id);",
													"        pm.environment.set('loanStartDate', responseJson.startDate);",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/{{loanId}}/renewal",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"{{loanId}}",
												"renewal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Renew loan, end date before current date, bad request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6dc55542-532a-4628-bdcd-18073960ac72",
												"exec": [
													"pm.test('Bad request status test', function() {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/4/renewal",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"4",
												"renewal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Renew loan, loan has already been renewed, bad request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc6941a9-6c8d-4b51-9c25-c4f51ecb1a4d",
												"exec": [
													"pm.test('Bad request status test', function() {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/5/renewal",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"5",
												"renewal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Return exemplar, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7727d50-f9b9-4c92-bc7e-9f83b93137d3",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/6/return",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"6",
												"return"
											]
										}
									},
									"response": []
								},
								{
									"name": "Return exemplar, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5ce88c7-251c-4af1-a5f1-18a117f3f3a9",
												"exec": [
													"pm.test('Bad request status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/155563/return",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"155563",
												"return"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Publisher",
							"item": [
								{
									"name": "Get all publishers, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aae641b2-8370-42d0-86de-dc3f58985202",
												"exec": [
													"const resultExpected = [",
													"    {",
													"        \"id\": 3,",
													"        \"name\": \"Gallimard\"",
													"    },",
													"    {",
													"        \"id\": 10,",
													"        \"name\": \"Livre de poche\"",
													"    },",
													"    {",
													"        \"id\": 11,",
													"        \"name\": \"Pocket\"",
													"    },",
													"    {",
													"        \"id\": 12,",
													"        \"name\": \"Eyrolles\"",
													"    },",
													"    {",
													"        \"id\": 13,",
													"        \"name\": \"Urban comics\"",
													"    }",
													"];",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/publishers",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get publisher by id, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a70c966-8879-494a-9a44-6999317f17f4",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 3,",
													"    \"name\": \"Gallimard\"",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/publishers/3",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get publisher by id, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d8e360f-023d-4fb4-acd6-1d3959653e42",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/publishers/3452",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers",
												"3452"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create publisher, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98b4524e-2872-4c4f-94fc-1acfa9ff899d",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json().name).to.equal('publisher name')",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"publisher name\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/publishers",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create publisher, invalid body, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "afb1e47e-e765-46d9-a7af-067bad1ee6c0",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"nadssdme\": \"publisher name\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/publishers",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update publisher, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61dfd636-c885-4420-885f-c3958f064a66",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 3,",
													"    \"name\": \"Test\"",
													"};",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 3,\n    \"name\": \"Test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/publishers/3",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers",
												"3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update publisher, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef122f76-adb3-45bf-be33-7d55be82c113",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 333,\n    \"name\": \"Test\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/publishers/333",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers",
												"333"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "UserWaitingList",
							"item": [
								{
									"name": "Get userWaitingList by user id, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92c25299-b0a0-40b3-8a7b-0cb2bde4a168",
												"exec": [
													"const resultExpected = [",
													"    {",
													"        \"id\": 1,",
													"        \"user\": {",
													"            \"id\": 1,",
													"            \"username\": \"admin\",",
													"            \"password\": \"$2a$10$vzGGdpg2SYq4BA7JKo9mb.duAxvY2FMP2f23mArYgtIsm7cKzqWPa\",",
													"            \"email\": \"lesbiblios@gmail.com\",",
													"            \"roles\": [",
													"                {",
													"                    \"id\": 0,",
													"                    \"name\": \"ROLE_ADMIN\"",
													"                }",
													"            ]",
													"        },",
													"        \"waitingList\": {",
													"            \"id\": 9,",
													"            \"size\": 4,",
													"            \"full\": false,",
													"            \"documentTitle\": \"Fables intégrale volume 1\",",
													"            \"documentId\": 24,",
													"            \"endDateNextLoanReturn\": \"2020-10-15\",",
													"            \"numberUsersInWaitingList\": 1",
													"        },",
													"        \"userPosition\": 1,",
													"        \"mailingDate\": null",
													"    },",
													"    {",
													"        \"id\": 3,",
													"        \"user\": {",
													"            \"id\": 1,",
													"            \"username\": \"admin\",",
													"            \"password\": \"$2a$10$vzGGdpg2SYq4BA7JKo9mb.duAxvY2FMP2f23mArYgtIsm7cKzqWPa\",",
													"            \"email\": \"lesbiblios@gmail.com\",",
													"            \"roles\": [",
													"                {",
													"                    \"id\": 0,",
													"                    \"name\": \"ROLE_ADMIN\"",
													"                }",
													"            ]",
													"        },",
													"        \"waitingList\": {",
													"            \"id\": 8,",
													"            \"size\": 2,",
													"            \"full\": false,",
													"            \"documentTitle\": \"Black Hammer Tome 3 : L'heure du jugement\",",
													"            \"documentId\": 23,",
													"            \"endDateNextLoanReturn\": \"2020-12-17\",",
													"            \"numberUsersInWaitingList\": 2",
													"        },",
													"        \"userPosition\": 2,",
													"        \"mailingDate\": null",
													"    }",
													"];",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/waitingLists/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get userWaitingList by user id, unknown entity, empty list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bfecf7d-a21c-4c95-b321-56df70ed127e",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.empty;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/waitingLists/1663",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists",
												"1663"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get first userWaitingList by waitingList id, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c458f3d4-c40c-4a2c-8149-e8d519fb2c2c",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 1,",
													"    \"user\": {",
													"        \"id\": 1,",
													"        \"username\": \"admin\",",
													"        \"password\": \"$2a$10$vzGGdpg2SYq4BA7JKo9mb.duAxvY2FMP2f23mArYgtIsm7cKzqWPa\",",
													"        \"email\": \"lesbiblios@gmail.com\",",
													"        \"roles\": [",
													"            {",
													"                \"id\": 0,",
													"                \"name\": \"ROLE_ADMIN\"",
													"            }",
													"        ]",
													"    },",
													"    \"waitingList\": {",
													"        \"id\": 9,",
													"        \"size\": 4,",
													"        \"full\": false,",
													"        \"documentTitle\": \"Fables intégrale volume 1\",",
													"        \"documentId\": 24,",
													"        \"endDateNextLoanReturn\": null,",
													"        \"numberUsersInWaitingList\": 0",
													"    },",
													"    \"userPosition\": 1,",
													"    \"mailingDate\": null",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/waitingLists/firstUser/9",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists",
												"firstUser",
												"9"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user to waitingList, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3bd67ae7-1274-4a18-9112-ddc3986016c6",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user\": {\n        \"id\": 3\n    },\n    \"waitingList\": {\n        \"id\": 9\n    },\n    \"userPosition\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/waitingLists",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user to waitingList, unknonw entity, not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa62c16e-939c-4df9-8564-9b00250d1d2b",
												"exec": [
													"pm.test('Not found status test', function() {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user\": {\n        \"id\": 34545\n    },\n    \"waitingList\": {\n        \"id\": 9\n    },\n    \"userPosition\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/waitingLists",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user to waitingList, waitinList full, bad request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36a6ee2c-7a77-4754-a3f0-06af0bd1f6ae",
												"exec": [
													"pm.test('Bad request status test', function() {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user\": {\n        \"id\": 1\n    },\n    \"waitingList\": {\n        \"id\": 8\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/waitingLists",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update userWaitingList, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ebed4b81-3e80-452a-9f50-ca3e71fae10e",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"id\": 1,\n        \"userPosition\": 1,\n        \"mailingDate\": \"2021-12-03\"\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/waitingLists",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update userWaitingList, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "001c9d53-44af-4e3e-96f5-3292250d8039",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"id\": 198453,\n        \"userPosition\": 1,\n        \"mailingDate\": \"2021-12-03\"\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/waitingLists",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete userWaitingList, success, change position of next users",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c282723b-ead0-4fea-90e6-47189aaec25b",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"});",
													"",
													"pm.request.url = 'http://localhost:8080/api/waitingLists/firstUser/8';",
													"pm.request.method = 'GET';",
													"pm.request.headers.add('Content-Type:application/json');",
													"pm.sendRequest(pm.request, function (err, res) {",
													"console.log(err ? err : res.json());",
													"    if (err === null) {",
													"        pm.test('Change user position test', function() {",
													"            pm.expect(res.json().user.id).to.equal(1);",
													"        })",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/waitingLists/2",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete userWaitingList, unknown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2bc9ad1-df55-4aa8-994b-ddf80b6a3f8e",
												"exec": [
													"pm.test('Internal server error status test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/waitingLists/25559",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists",
												"25559"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bc4a5b71-c388-4d5c-b7e5-de36a173b90f",
								"type": "text/javascript",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://localhost:8080/api/auth/signin',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"        \tusername: 'admin',",
									"            password: 'admin'",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"console.log(err ? err : res.json());",
									"    if (err === null) {",
									"        console.log('Saving the token')",
									"        var responseJson = res.json();",
									"        pm.environment.set('accessToken', responseJson.token)",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5f290ddd-a735-4e95-9b6f-95f3070dd5bf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Role user",
					"item": [
						{
							"name": "Library",
							"item": [
								{
									"name": "Get all libraries, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d8b4c2d-cc97-438c-8c55-6062f74de7f7",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/libraries",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get library by id, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be4b56b2-4218-4be0-a87d-810e853a6b21",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/libraries/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create library, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a175cb09-cc52-4ed5-9672-e757fa97e054",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 452,\n    \"name\": \"library name\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/libraries",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update library, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2892f589-3d78-4800-98f5-03248107e356",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 452,\n    \"name\": \"library name\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/libraries/452",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries",
												"452"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete library, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "294378cf-bdb4-440e-88e1-ecf36939d7a9",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/libraries/452",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"libraries",
												"452"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Author",
							"item": [
								{
									"name": "Get all authors, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64166161-cce4-45d7-92c2-0dc61eb49781",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/authors",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get author id 1, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0128812c-4193-4d60-b2cc-668ca9faeb04",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/authors/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create author, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e80115e-6175-486c-bacf-8d62a909361f",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 71,\n    \"lastName\": \"lastName\",\n    \"firstName\": \"firstName\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/authors",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update author, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8195efad-468d-4392-9479-11d69894e8a3",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 71,\n    \"lastName\": \"lastName\",\n    \"firstName\": \"firstName\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/authors/71",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors",
												"71"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete author, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbb95738-b2a2-4b71-b07d-174c9f1fd546",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/authors/71",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"authors",
												"71"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Publisher",
							"item": [
								{
									"name": "Get all publishers, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5110cbe7-4eb1-4f45-81df-c7dbc6e4cdc4",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/publishers",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get publisher by id, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0c80955-0f7e-4b0c-9360-c532bf659266",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/publishers/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create publisher, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcf61699-92e0-4c75-a9f3-010d8cf1b06c",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 12,\n    \"name\": \"publisher name\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/publishers",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update publisher, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bb898ef-b71c-4a90-9050-219ddde7a075",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 12,\n    \"name\": \"publisher name\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/publishers/12",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers",
												"12"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete publisher, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "574b3734-e681-4930-9bac-b56662fb3978",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/publishers/12",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"publishers",
												"12"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Document",
							"item": [
								{
									"name": "Get all documents, default page, no search criteria",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "633d985f-49eb-410b-9ce1-922f739db05c",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Total pages test', function() {",
													"    pm.expect(responseJson.totalPages).to.equal(2);",
													"})",
													"pm.test('Total elements test', function() {",
													"    pm.expect(responseJson.totalElements).to.equal(10);",
													"})",
													"pm.test('First page test', function() {",
													"    pm.expect(responseJson.first).to.equal(true);",
													"})",
													"pm.test('Page size', function() {",
													"    pm.expect(responseJson.size).to.equal(6);",
													"})",
													"pm.test('Page number of elements', function() {",
													"    pm.expect(responseJson.numberOfElements).to.equal(6);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all documents, page 2, no search criteria",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45849208-617d-4900-8749-8150dd9d63d3",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Last page test', function() {",
													"    pm.expect(responseJson.last).to.equal(true);",
													"})",
													"pm.test('First page test', function() {",
													"    pm.expect(responseJson.first).to.equal(false);",
													"})",
													"pm.test('Page number test', function() {",
													"    pm.expect(responseJson.number).to.equal(1);",
													"})",
													"pm.test('Page number of elements', function() {",
													"    pm.expect(responseJson.numberOfElements).to.equal(4);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents?page=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all documents, default page, search by author",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "878e5ed8-34b2-4e68-b280-fca4de64104a",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Last page test', function() {",
													"    pm.expect(responseJson.last).to.equal(true);",
													"})",
													"pm.test('First page test', function() {",
													"    pm.expect(responseJson.first).to.equal(true);",
													"})",
													"pm.test('Page number test', function() {",
													"    pm.expect(responseJson.number).to.equal(0);",
													"})",
													"pm.test('Page number of elements', function() {",
													"    pm.expect(responseJson.numberOfElements).to.equal(3);",
													"})",
													"pm.test('Author name test', function() {",
													"    responseJson.content.forEach(element => pm.expect(element.authorLastName).to.equal('King'));",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents?authorName=King",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											],
											"query": [
												{
													"key": "authorName",
													"value": "King"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all documents, default page, search by category",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b0d8c17-e28b-49c7-b585-b1b06282281e",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Last page test', function() {",
													"    pm.expect(responseJson.last).to.equal(true);",
													"})",
													"pm.test('First page test', function() {",
													"    pm.expect(responseJson.first).to.equal(true);",
													"})",
													"pm.test('Page number test', function() {",
													"    pm.expect(responseJson.number).to.equal(0);",
													"})",
													"pm.test('Page number of elements', function() {",
													"    pm.expect(responseJson.numberOfElements).to.equal(2);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents?category=Thriller",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											],
											"query": [
												{
													"key": "category",
													"value": "Thriller"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a document by id, success, can't be reserved because there are exemplars available",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fad2659a-6619-4d26-9bea-392ec6f26bc8",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 22, ",
													"    \"title\" : \"Conception et programmation orientée objet\",",
													"    \"type\": \"Livre\",",
													"    \"category\": \"Informatique\",",
													"    \"canBeReserved\": false",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.include(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents/22?userId=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"22"
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get a document by id, can't be reserved because this user has already reserved it",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3997ed8-e085-4a69-bff4-d207f9539878",
												"exec": [
													"const resultExpected = {",
													"    \"id\": 24,",
													"    \"title\": \"Fables intégrale volume 1\",",
													"    \"isbn\": \"979-10-268-1391-0\",",
													"    \"publicationDate\": \"2018-01-19\",",
													"    \"canBeReserved\": false",
													"};",
													"",
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.deep.include(resultExpected);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents/24?userId=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"24"
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get document by id, unkown entity, internal server error",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09947f6e-fd9c-41e4-b702-fda7081bc7ff",
												"exec": [
													"pm.test('Internal server error test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/documents/999?userId=1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"999"
											],
											"query": [
												{
													"key": "userId",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create document, Forbidden",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "382acb7e-2d15-4b32-a463-40c21606be14",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "007c34b6-ec51-48e2-be46-871461b33ed3",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"title\": \"test document\",\n    \"isbn\": \"test-document-isbn\",\n    \"description\": \"test document description\",\n    \"publicationDate\": \"2020-12-03\",\n    \"publisher\" : {\n        \"id\": 3\n    },\n    \"author\": {\n        \"id\" : 7\n    },\n    \"type\": \"Livre\",\n    \"category\": \"Science-Fiction\",\n    \"photo\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/documents",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update document, Forbidden",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "37a8b610-d5db-4076-b160-66a5542f5c80",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5536c87b-0aeb-48a2-bc80-918432a9cff2",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 22,\n    \"title\": \"Conception et programmation orientée objet\",\n    \"isbn\": \"978-2-212-67500-9\",\n    \"description\": \"Réédition d'un des plus grands classiques de la littérature informatique. Ecrit dans un style d'une clarté absolue, cet ouvrage réussit le tour de force d'être à la fois un livre de réflexion approfondie sur les concepts objet et un ouvrage pratique, apportant des réponses concrètes aux questions que se posent tous les programmeurs et concepteurs de logiciels : comment construire des applications logicielles fiables, performantes, faciles à utiliser et à faire évoluer ? Théorie du typage, gestion de la mémoire, techniques d'héritage, programmation concurrente, objets distribués, persistance et bases de données objet, analyse et conception, réutilisabilité... Tous les aspects du processus de développement logiciel et des technologies objet sont expliqués et discutés dans leurs moindres détails, dans un style brillant, souvent drôle et provocateur.\",\n    \"publicationDate\": \"2017-12-26\",\n    \"publisher\": {\n        \"id\": 12,\n        \"name\": \"Eyrolles\"\n    },\n    \"author\": {\n        \"id\": 21,\n        \"lastName\": \"Meyer\",\n        \"firstName\": \"Bertrand\"\n    },\n    \"type\": \"Livre\",\n    \"category\": \"Informatique\",\n    \"waitingList\": {\n        \"id\": 7,\n        \"size\": 2,\n        \"full\": false,\n        \"documentTitle\": \"Conception et programmation orientée objet\",\n        \"documentId\": 22,\n        \"endDateNextLoanReturn\": null,\n        \"numberUsersInWaitingList\": 0\n    },\n    \"canBeReserved\": false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/documents/22",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"documents",
												"22"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Exemplar",
							"item": [
								{
									"name": "Get all available exemplars by document id = 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79ff935e-d1d1-427c-b25f-f0a7fb45cd4f",
												"exec": [
													"pm.test('Status success test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/exemplars?documentId=4",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars"
											],
											"query": [
												{
													"key": "documentId",
													"value": "4"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all available exemplars by document id = 16",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27ec1e5f-95e1-46fa-8874-90d1b8b3f89a",
												"exec": [
													"const resultExpected = [",
													"    {",
													"        \"number\": 1,",
													"        \"libraryName\": \"Grande bibliothèque de Lyon update\"",
													"    }",
													"];",
													"",
													"pm.test('Status success test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test('Results test', function() {",
													"    pm.expect(pm.response.json()).to.deep.equal(resultExpected);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/exemplars?documentId=16",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars"
											],
											"query": [
												{
													"key": "documentId",
													"value": "16"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get exemplar id 47",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3222010-4bb5-48b5-ae1b-2775e0b9d421",
												"exec": [
													"const responseJson = pm.response.json();",
													"",
													"pm.test('Status success test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Result test', function() {",
													"    console.log('reponse', responseJson);",
													"    pm.expect(responseJson.id).to.equal(38);",
													"    pm.expect(responseJson.document.id).to.equal(16);",
													"    pm.expect(responseJson.document.title).to.equal(\"Brume\");",
													"    pm.expect(responseJson.document.publisher.id).to.equal(10);",
													"    pm.expect(responseJson.document.author.id).to.equal(6);",
													"    pm.expect(responseJson.library.id).to.equal(25);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/exemplars/38",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars",
												"38"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get exemplar id 256 not exists",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54af4460-da1f-4001-bc7b-245bd18c5d99",
												"exec": [
													"pm.test('Internal server error test', function() {",
													"    pm.expect(pm.response.code).to.equal(500);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/exemplars/256",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars",
												"256"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create exemplar, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cfc60408-cf3c-4a03-a69e-f398018dcb76",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document\": {\n        \"id\": 16\n    },\n    \"library\": {\n        \"id\": 25,\n        \"name\": \"Grande bibliothèque de Lyon\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/exemplars",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update exemplar, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "813568bd-5fd8-4cba-a7c9-040f4c1cfdf3",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": 38,\n    \"reference\": \"BOOK_9782253151593_1597229931728test\",\n    \"document\": {\n        \"id\": 16,\n        \"title\": \"Brume\",\n        \"isbn\": \"978-2-253-15159-3\",\n        \"description\": \"Imaginez une brume qui s'abat soudainement sur une petite ville, une brume si épaisse que les clients d'un supermarché hésitent à en ressortir. Il n'en faut pas davantage au maître de l'épouvante pour nous plonger dans le cauchemar avec un réalisme hallucinant. Chacune des nouvelles de ce volume possède le même pouvoir ensorcelant. Vous serez terrifié par un petit singe en peluche qui joue des cymbales. Vous redouterez de voir surgir le fantôme d'un... camion. Vous saurez de quoi est capable un naufragé solitaire, lorsque la faim le tenaille et que la drogue décuple son courage. L'art de faire surgir l'effrayant ou le surnaturel au cœur d'un monde rassurant et prosaïque... Les superbes décors du Maine, où vit Stephen King, se révèlent une fois encore peuplés de sortilèges et de malédictions. \",\n        \"publicationDate\": \"2006-06-07\",\n        \"publisher\": {\n            \"id\": 10,\n            \"name\": \"Livre de poche\"\n        },\n        \"author\": {\n            \"id\": 6,\n            \"lastName\": \"King\",\n            \"firstName\": \"Stephen\"\n        },\n        \"type\": \"Livre\",\n        \"category\": \"Science-Fiction\",\n        \"photo\": {\n            \"id\": 2,\n            \"name\": \"978-2-253-15159-3.jpg\",\n            \"extension\": \"jpg\",\n            \"fileToBase64String\": null\n        },\n        \"waitingList\": {\n            \"id\": 3,\n            \"size\": 10,\n            \"full\": false,\n            \"documentTitle\": \"Brume\",\n            \"documentId\": 16,\n            \"endDateNextLoanReturn\": null,\n            \"numberUsersInWaitingList\": 0\n        },\n        \"canBeReserved\": true\n    },\n    \"library\": {\n        \"id\": 25,\n        \"name\": \"Grande bibliothèque de Lyon\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/exemplars/47",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"exemplars",
												"47"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Loan",
							"item": [
								{
									"name": "Get all loans, Forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ffc64cc-1039-4640-953e-34b116989566",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all loans by user id, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0dad129-23cb-486a-b343-1655a9b905c8",
												"exec": [
													"pm.test('Unauthorized status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json().length).to.equal(2);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/users/2",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"users",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all loans by user id, unknown user, empty array",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcd80d2c-788e-4e78-8c49-c4dc56f697ac",
												"exec": [
													"pm.test('Internal server error test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.empty;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/users/99",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"users",
												"99"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get all ended loans, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d462d482-6886-4612-b6bb-23f654b2e88d",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/ended",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"ended"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create loan, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8758ecff-50cc-4043-941c-e18696e6c654",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user\": {\n        \"id\": 1\n    },\n    \"exemplar\": {\n        \"id\": 27\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/loans",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update loan, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db38feeb-8493-48b1-a2fe-f15da8e1e03a",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"id\": 4,\n        \"startDate\": \"2020-07-18\",\n        \"endDate\": \"2020-08-15\",\n        \"renewed\": false,\n        \"user\": {\n            \"id\": 2,\n            \"username\": \"user1\",\n            \"email\": \"user1@email.com\"\n        },\n        \"exemplar\": {\n            \"id\": 30,\n            \"reference\": \"BOOK_9782070612758_1597229880162\",\n            \"library\": {\n                \"id\": 25,\n                \"name\": \"Grande bibliothèque de Lyon\"\n            },\n            \"loanEndDate\": null,\n            \"documentTitle\": \"Le petit prince\"\n        }\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/loans/4",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete loan, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fc0d6b8-324b-4c1d-bcba-3c53276ecbc1",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/4",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"4"
											]
										}
									},
									"response": []
								},
								{
									"name": "Renew loan, end date before current date, bad request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8d5d90c-5ac9-4afe-891c-43fd9da33747",
												"exec": [
													"pm.test('Bad request status test', function() {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/4/renewal",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"4",
												"renewal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Renew loan, loan has already been renewed, bad request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8404244f-ab3e-4ca5-81df-68493cb8c2a8",
												"exec": [
													"pm.test('Bad request status test', function() {",
													"    pm.expect(pm.response.code).to.equal(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/5/renewal",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"5",
												"renewal"
											]
										}
									},
									"response": []
								},
								{
									"name": "Return exemplar, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70319b26-decf-41db-a11c-0664a74e5f8f",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/loans/6/return",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"loans",
												"6",
												"return"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "UserWaitingList",
							"item": [
								{
									"name": "Get userWaitingList by user id, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86d51ae3-bf90-4665-bdc8-d2a907539d25",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json().length).to.equal(2);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/waitingLists/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get userWaitingList by user id, unknown entity, empty list",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e75f1f90-300a-4dad-9ac4-550f100cfc79",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"});",
													"pm.test('Result test', function() {",
													"    pm.expect(pm.response.json()).to.empty;",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/waitingLists/1663",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists",
												"1663"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get first userWaitingList by waitingList id, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9841755b-7fb2-4403-b278-bcaf40c297dc",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://localhost:8080/api/waitingLists/firstUser/9",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists",
												"firstUser",
												"9"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user to waitingList, success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38381736-a421-4aea-802d-8e21acf129ce",
												"exec": [
													"pm.test('Success status test', function() {",
													"    pm.expect(pm.response.code).to.equal(204);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user\": {\n        \"id\": 3\n    },\n    \"waitingList\": {\n        \"id\": 9\n    },\n    \"userPosition\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/waitingLists",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists"
											]
										}
									},
									"response": []
								},
								{
									"name": "Add user to waitingList, unknonw entity, not found",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2654928-7075-4ecc-937c-6d55774bf0e0",
												"exec": [
													"pm.test('Not found status test', function() {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user\": {\n        \"id\": 34545\n    },\n    \"waitingList\": {\n        \"id\": 9\n    },\n    \"userPosition\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/waitingLists",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update userWaitingList, forbidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "920ceae1-dd5c-4299-83e0-b9623f6b914f",
												"exec": [
													"pm.test('Forbidden status test', function() {",
													"    pm.expect(pm.response.code).to.equal(403);",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n        \"id\": 1,\n        \"userPosition\": 1,\n        \"mailingDate\": \"2021-12-03\"\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/api/waitingLists",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"api",
												"waitingLists"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a823df13-301a-44a5-a827-5f5c5a0056a1",
								"type": "text/javascript",
								"exec": [
									"const echoPostRequest = {",
									"  url: 'http://localhost:8080/api/auth/signin',",
									"  method: 'POST',",
									"  header: 'Content-Type:application/json',",
									"  body: {",
									"    mode: 'application/json',",
									"    raw: JSON.stringify(",
									"        {",
									"        \tusername: 'user1',",
									"            password: 'user1'",
									"        })",
									"  }",
									"};",
									"",
									"pm.sendRequest(echoPostRequest, function (err, res) {",
									"console.log(err ? err : res.json());",
									"    if (err === null) {",
									"        console.log('Saving the token')",
									"        var responseJson = res.json();",
									"        pm.environment.set('accessToken', responseJson.token)",
									"    }",
									"});"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ad95231-50f9-4a64-b9a3-df859eb96317",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}